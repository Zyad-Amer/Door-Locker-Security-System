
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000245a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000245a  000024ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800086  00800086  00002514  2**0
                  ALLOC
  3 .stab         00002ad8  00000000  00000000  00002514  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001538  00000000  00000000  00004fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000841d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 08 	call	0x1056	; 0x1056 <main>
      8a:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer1_1min_callback>:
uint8 g_time_1min=0;	/*Flag of 1 min */
uint8 g_time_15sec=0;	/*Flag of 15 sec */
uint8 g_time_3sec=0;	/*Flag of 3 sec */

void timer1_1min_callback(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 86 00 	lds	r24, 0x0086
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 86 00 	sts	0x0086, r24
	if(g_tick==4)
     b58:	80 91 86 00 	lds	r24, 0x0086
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	19 f4       	brne	.+6      	; 0xb66 <timer1_1min_callback+0x20>
	{
		g_time_1min=1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 87 00 	sts	0x0087, r24
	}
}
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <timer1_15sec_callback>:

void timer1_15sec_callback(void)
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
    g_time_15sec = 1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 88 00 	sts	0x0088, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <timer1_3sec_callback>:

void timer1_3sec_callback(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	g_time_3sec=1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 89 00 	sts	0x0089, r24
}
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <calc_1min>:

void calc_1min(void)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	2b 97       	sbiw	r28, 0x0b	; 11
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType Timer1_1min_Configuration={0,11111,F_CPU_1024,CompareMode};
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	8f 83       	std	Y+7, r24	; 0x07
     bb0:	e8 e6       	ldi	r30, 0x68	; 104
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	fa 87       	std	Y+10, r31	; 0x0a
     bb6:	e9 87       	std	Y+9, r30	; 0x09
     bb8:	f6 e0       	ldi	r31, 0x06	; 6
     bba:	fb 87       	std	Y+11, r31	; 0x0b
     bbc:	e9 85       	ldd	r30, Y+9	; 0x09
     bbe:	fa 85       	ldd	r31, Y+10	; 0x0a
     bc0:	00 80       	ld	r0, Z
     bc2:	89 85       	ldd	r24, Y+9	; 0x09
     bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	9a 87       	std	Y+10, r25	; 0x0a
     bca:	89 87       	std	Y+9, r24	; 0x09
     bcc:	ef 81       	ldd	r30, Y+7	; 0x07
     bce:	f8 85       	ldd	r31, Y+8	; 0x08
     bd0:	00 82       	st	Z, r0
     bd2:	8f 81       	ldd	r24, Y+7	; 0x07
     bd4:	98 85       	ldd	r25, Y+8	; 0x08
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	98 87       	std	Y+8, r25	; 0x08
     bda:	8f 83       	std	Y+7, r24	; 0x07
     bdc:	9b 85       	ldd	r25, Y+11	; 0x0b
     bde:	91 50       	subi	r25, 0x01	; 1
     be0:	9b 87       	std	Y+11, r25	; 0x0b
     be2:	eb 85       	ldd	r30, Y+11	; 0x0b
     be4:	ee 23       	and	r30, r30
     be6:	51 f7       	brne	.-44     	; 0xbbc <calc_1min+0x28>
	Timer1_init(&Timer1_1min_Configuration);
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Timer1_init>
	Timer1_setCallBack(&timer1_1min_callback);
     bf0:	83 ea       	ldi	r24, 0xA3	; 163
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Timer1_setCallBack>

	while(g_time_1min != 1){}
     bf8:	80 91 87 00 	lds	r24, 0x0087
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <calc_1min+0x64>

	g_time_1min=0;
     c00:	10 92 87 00 	sts	0x0087, r1
}
     c04:	2b 96       	adiw	r28, 0x0b	; 11
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <calc_15sec>:

void calc_15sec(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	2b 97       	sbiw	r28, 0x0b	; 11
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
    Timer1_ConfigType Timer1_15sec_Configuration = {0, 11111, F_CPU_1024, CompareMode};
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	98 87       	std	Y+8, r25	; 0x08
     c30:	8f 83       	std	Y+7, r24	; 0x07
     c32:	ee e6       	ldi	r30, 0x6E	; 110
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	fa 87       	std	Y+10, r31	; 0x0a
     c38:	e9 87       	std	Y+9, r30	; 0x09
     c3a:	f6 e0       	ldi	r31, 0x06	; 6
     c3c:	fb 87       	std	Y+11, r31	; 0x0b
     c3e:	e9 85       	ldd	r30, Y+9	; 0x09
     c40:	fa 85       	ldd	r31, Y+10	; 0x0a
     c42:	00 80       	ld	r0, Z
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	9a 87       	std	Y+10, r25	; 0x0a
     c4c:	89 87       	std	Y+9, r24	; 0x09
     c4e:	ef 81       	ldd	r30, Y+7	; 0x07
     c50:	f8 85       	ldd	r31, Y+8	; 0x08
     c52:	00 82       	st	Z, r0
     c54:	8f 81       	ldd	r24, Y+7	; 0x07
     c56:	98 85       	ldd	r25, Y+8	; 0x08
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	98 87       	std	Y+8, r25	; 0x08
     c5c:	8f 83       	std	Y+7, r24	; 0x07
     c5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c60:	91 50       	subi	r25, 0x01	; 1
     c62:	9b 87       	std	Y+11, r25	; 0x0b
     c64:	eb 85       	ldd	r30, Y+11	; 0x0b
     c66:	ee 23       	and	r30, r30
     c68:	51 f7       	brne	.-44     	; 0xc3e <calc_15sec+0x28>
    Timer1_init(&Timer1_15sec_Configuration);
     c6a:	ce 01       	movw	r24, r28
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Timer1_init>
    Timer1_setCallBack(&timer1_15sec_callback);
     c72:	86 eb       	ldi	r24, 0xB6	; 182
     c74:	95 e0       	ldi	r25, 0x05	; 5
     c76:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Timer1_setCallBack>

    while (g_time_15sec != 1) {}
     c7a:	80 91 88 00 	lds	r24, 0x0088
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	e1 f7       	brne	.-8      	; 0xc7a <calc_15sec+0x64>

    g_time_15sec = 0;
     c82:	10 92 88 00 	sts	0x0088, r1
}
     c86:	2b 96       	adiw	r28, 0x0b	; 11
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <calc_3sec>:

void calc_3sec(void)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	2b 97       	sbiw	r28, 0x0b	; 11
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
    Timer1_ConfigType Timer1_3sec_Configuration = {0, 2222, F_CPU_1024, CompareMode};
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	98 87       	std	Y+8, r25	; 0x08
     cb2:	8f 83       	std	Y+7, r24	; 0x07
     cb4:	e4 e7       	ldi	r30, 0x74	; 116
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	fa 87       	std	Y+10, r31	; 0x0a
     cba:	e9 87       	std	Y+9, r30	; 0x09
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	fb 87       	std	Y+11, r31	; 0x0b
     cc0:	e9 85       	ldd	r30, Y+9	; 0x09
     cc2:	fa 85       	ldd	r31, Y+10	; 0x0a
     cc4:	00 80       	ld	r0, Z
     cc6:	89 85       	ldd	r24, Y+9	; 0x09
     cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	9a 87       	std	Y+10, r25	; 0x0a
     cce:	89 87       	std	Y+9, r24	; 0x09
     cd0:	ef 81       	ldd	r30, Y+7	; 0x07
     cd2:	f8 85       	ldd	r31, Y+8	; 0x08
     cd4:	00 82       	st	Z, r0
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	98 87       	std	Y+8, r25	; 0x08
     cde:	8f 83       	std	Y+7, r24	; 0x07
     ce0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ce2:	91 50       	subi	r25, 0x01	; 1
     ce4:	9b 87       	std	Y+11, r25	; 0x0b
     ce6:	eb 85       	ldd	r30, Y+11	; 0x0b
     ce8:	ee 23       	and	r30, r30
     cea:	51 f7       	brne	.-44     	; 0xcc0 <calc_3sec+0x28>
    Timer1_init(&Timer1_3sec_Configuration);
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Timer1_init>
    Timer1_setCallBack(&timer1_3sec_callback);
     cf4:	80 ec       	ldi	r24, 0xC0	; 192
     cf6:	95 e0       	ldi	r25, 0x05	; 5
     cf8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Timer1_setCallBack>

    while (g_time_3sec != 1) {}
     cfc:	80 91 89 00 	lds	r24, 0x0089
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	e1 f7       	brne	.-8      	; 0xcfc <calc_3sec+0x64>

    g_time_3sec = 0;
     d04:	10 92 89 00 	sts	0x0089, r1
}
     d08:	2b 96       	adiw	r28, 0x0b	; 11
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <wait_and_sendByte>:

void wait_and_sendByte(uint8 DataByte)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
	/*Send readiness signal to HMI_ECU*/
	UART_sendByte(CONTROL_ECU_IS_READY);
     d26:	8b ef       	ldi	r24, 0xFB	; 251
     d28:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_sendByte>
	/* Wait until the HMI_ECU is ready to receive the data */
	while(UART_recieveByte() != HMI_ECU_IS_READY){}
     d2c:	0e 94 0a 11 	call	0x2214	; 0x2214 <UART_recieveByte>
     d30:	8c 3f       	cpi	r24, 0xFC	; 252
     d32:	e1 f7       	brne	.-8      	; 0xd2c <wait_and_sendByte+0x12>
	/* Send the required byte to the HMI_ECU*/
	UART_sendByte(DataByte);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_sendByte>
}
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <wait_and_receiveByte>:

uint8 wait_and_receiveByte(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
    /* Wait for readiness signal from HMI_ECU*/
    while (UART_recieveByte() != HMI_ECU_IS_READY) {}
     d4a:	0e 94 0a 11 	call	0x2214	; 0x2214 <UART_recieveByte>
     d4e:	8c 3f       	cpi	r24, 0xFC	; 252
     d50:	e1 f7       	brne	.-8      	; 0xd4a <wait_and_receiveByte+0x8>
    /*Send readiness signal to HMI_ECU*/
    UART_sendByte(CONTROL_ECU_IS_READY);
     d52:	8b ef       	ldi	r24, 0xFB	; 251
     d54:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_sendByte>
    /* Now receive actual data from HMI_ECU*/
    return UART_recieveByte();
     d58:	0e 94 0a 11 	call	0x2214	; 0x2214 <UART_recieveByte>
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <wait_and_receiveArray>:

void wait_and_receiveArray(uint8 *arr,uint8 size)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <wait_and_receiveArray+0x6>
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	6b 83       	std	Y+3, r22	; 0x03
    /* Wait for readiness signal from HMI_ECU*/
    while (UART_recieveByte() != HMI_ECU_IS_READY) {}
     d74:	0e 94 0a 11 	call	0x2214	; 0x2214 <UART_recieveByte>
     d78:	8c 3f       	cpi	r24, 0xFC	; 252
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <wait_and_receiveArray+0x12>
    /*Send readiness signal to HMI_ECU*/
    UART_sendByte(CONTROL_ECU_IS_READY);
     d7c:	8b ef       	ldi	r24, 0xFB	; 251
     d7e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_sendByte>
    /* Now receive the array from HMI_ECU*/
    UART_receiveArray(arr,size);
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	6b 81       	ldd	r22, Y+3	; 0x03
     d88:	0e 94 a9 11 	call	0x2352	; 0x2352 <UART_receiveArray>
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <compareArrays>:

uint8 compareArrays(uint8 *arr1,uint8 *arr2,uint8 size)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	27 97       	sbiw	r28, 0x07	; 7
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	9b 83       	std	Y+3, r25	; 0x03
     dae:	8a 83       	std	Y+2, r24	; 0x02
     db0:	7d 83       	std	Y+5, r23	; 0x05
     db2:	6c 83       	std	Y+4, r22	; 0x04
     db4:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	for(i=0;i<size;i++)
     db6:	19 82       	std	Y+1, r1	; 0x01
     db8:	19 c0       	rjmp	.+50     	; 0xdec <compareArrays+0x54>
	{
		if(arr1[i]!=arr2[i])
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	fc 01       	movw	r30, r24
     dc6:	e2 0f       	add	r30, r18
     dc8:	f3 1f       	adc	r31, r19
     dca:	40 81       	ld	r20, Z
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	9d 81       	ldd	r25, Y+5	; 0x05
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	80 81       	ld	r24, Z
     dde:	48 17       	cp	r20, r24
     de0:	11 f0       	breq	.+4      	; 0xde6 <compareArrays+0x4e>
		{
			return 0;
     de2:	1f 82       	std	Y+7, r1	; 0x07
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <compareArrays+0x60>
}

uint8 compareArrays(uint8 *arr1,uint8 *arr2,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	99 81       	ldd	r25, Y+1	; 0x01
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	98 17       	cp	r25, r24
     df2:	18 f3       	brcs	.-58     	; 0xdba <compareArrays+0x22>
		if(arr1[i]!=arr2[i])
		{
			return 0;
		}
	}
	return 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	8f 83       	std	Y+7, r24	; 0x07
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
}
     dfa:	27 96       	adiw	r28, 0x07	; 7
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <Check_Created_Password>:

/*function responsible for receive 2 passwords and check their equality
 * then send the check feedback to HMI_ECU and save the password in EEPROM in case they are equal*/
void Check_Created_Password(void)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	64 97       	sbiw	r28, 0x14	; 20
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[5],pass2[5];

	/* Receive pass1 array from HMI_ECU through UART */
	wait_and_receiveArray(pass1,5);
     e20:	ce 01       	movw	r24, r28
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	65 e0       	ldi	r22, 0x05	; 5
     e26:	0e 94 b1 06 	call	0xd62	; 0xd62 <wait_and_receiveArray>

	/* Receive pass2 array from HMI_ECU through UART */
	wait_and_receiveArray(pass2,5);
     e2a:	ce 01       	movw	r24, r28
     e2c:	06 96       	adiw	r24, 0x06	; 6
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	0e 94 b1 06 	call	0xd62	; 0xd62 <wait_and_receiveArray>

	/*if the 2 passwords are unmatched */
	if(compareArrays(pass1,pass2,5)==0)
     e34:	9e 01       	movw	r18, r28
     e36:	2a 5f       	subi	r18, 0xFA	; 250
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	b9 01       	movw	r22, r18
     e40:	45 e0       	ldi	r20, 0x05	; 5
     e42:	0e 94 cc 06 	call	0xd98	; 0xd98 <compareArrays>
     e46:	88 23       	and	r24, r24
     e48:	31 f4       	brne	.+12     	; 0xe56 <Check_Created_Password+0x4a>
	{
		wait_and_sendByte(UNMATCHED_PASSWORDS);
     e4a:	8d ef       	ldi	r24, 0xFD	; 253
     e4c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <wait_and_sendByte>
		Check_Created_Password();
     e50:	0e 94 06 07 	call	0xe0c	; 0xe0c <Check_Created_Password>
     e54:	3b c0       	rjmp	.+118    	; 0xecc <Check_Created_Password+0xc0>
	}

	/*if the 2 passwords are matched */
	else if(compareArrays(pass1,pass2,5)==1)
     e56:	9e 01       	movw	r18, r28
     e58:	2a 5f       	subi	r18, 0xFA	; 250
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	b9 01       	movw	r22, r18
     e62:	45 e0       	ldi	r20, 0x05	; 5
     e64:	0e 94 cc 06 	call	0xd98	; 0xd98 <compareArrays>
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	81 f5       	brne	.+96     	; 0xecc <Check_Created_Password+0xc0>
	{
		TWI_ConfigType TWI_configuration={CONTROL_ECU_ADRS,FastMode};
     e6c:	ce 01       	movw	r24, r28
     e6e:	0b 96       	adiw	r24, 0x0b	; 11
     e70:	99 8b       	std	Y+17, r25	; 0x11
     e72:	88 8b       	std	Y+16, r24	; 0x10
     e74:	ea e7       	ldi	r30, 0x7A	; 122
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	fb 8b       	std	Y+19, r31	; 0x13
     e7a:	ea 8b       	std	Y+18, r30	; 0x12
     e7c:	f5 e0       	ldi	r31, 0x05	; 5
     e7e:	fc 8b       	std	Y+20, r31	; 0x14
     e80:	ea 89       	ldd	r30, Y+18	; 0x12
     e82:	fb 89       	ldd	r31, Y+19	; 0x13
     e84:	00 80       	ld	r0, Z
     e86:	8a 89       	ldd	r24, Y+18	; 0x12
     e88:	9b 89       	ldd	r25, Y+19	; 0x13
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	9b 8b       	std	Y+19, r25	; 0x13
     e8e:	8a 8b       	std	Y+18, r24	; 0x12
     e90:	e8 89       	ldd	r30, Y+16	; 0x10
     e92:	f9 89       	ldd	r31, Y+17	; 0x11
     e94:	00 82       	st	Z, r0
     e96:	88 89       	ldd	r24, Y+16	; 0x10
     e98:	99 89       	ldd	r25, Y+17	; 0x11
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	99 8b       	std	Y+17, r25	; 0x11
     e9e:	88 8b       	std	Y+16, r24	; 0x10
     ea0:	9c 89       	ldd	r25, Y+20	; 0x14
     ea2:	91 50       	subi	r25, 0x01	; 1
     ea4:	9c 8b       	std	Y+20, r25	; 0x14
     ea6:	ec 89       	ldd	r30, Y+20	; 0x14
     ea8:	ee 23       	and	r30, r30
     eaa:	51 f7       	brne	.-44     	; 0xe80 <Check_Created_Password+0x74>
		TWI_init(&TWI_configuration);
     eac:	ce 01       	movw	r24, r28
     eae:	0b 96       	adiw	r24, 0x0b	; 11
     eb0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <TWI_init>

		wait_and_sendByte(MATCHED_PASSWORDS);
     eb4:	8e ef       	ldi	r24, 0xFE	; 254
     eb6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <wait_and_sendByte>

		/*save the password in the memory*/
		EEPROM_writeArray(PASSWORD_EEPROM_ADRS,pass1,5);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	9e 01       	movw	r18, r28
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	b9 01       	movw	r22, r18
     ec6:	45 e0       	ldi	r20, 0x05	; 5
     ec8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <EEPROM_writeArray>
	}
}
     ecc:	64 96       	adiw	r28, 0x14	; 20
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <Check_opendoor_Password>:

/*function to receive a password then compare it with the saved one in the EEPROM
 * then send the check feedback to HMI_ECU */
void Check_opendoor_Password(void)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	2b 97       	sbiw	r28, 0x0b	; 11
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
	uint8 entered_pass[5],memory_pass[5],temp;

	/* Receive password array from HMI_ECU through UART */
	wait_and_receiveArray(entered_pass,5);
     ef2:	ce 01       	movw	r24, r28
     ef4:	02 96       	adiw	r24, 0x02	; 2
     ef6:	65 e0       	ldi	r22, 0x05	; 5
     ef8:	0e 94 b1 06 	call	0xd62	; 0xd62 <wait_and_receiveArray>

	EEPROM_readArray(PASSWORD_EEPROM_ADRS,memory_pass,5);
     efc:	9e 01       	movw	r18, r28
     efe:	29 5f       	subi	r18, 0xF9	; 249
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	b9 01       	movw	r22, r18
     f08:	45 e0       	ldi	r20, 0x05	; 5
     f0a:	0e 94 47 0a 	call	0x148e	; 0x148e <EEPROM_readArray>

	/*if the 2 passwords are unmatched */
	if(compareArrays(entered_pass,memory_pass,5)==0)
     f0e:	ce 01       	movw	r24, r28
     f10:	02 96       	adiw	r24, 0x02	; 2
     f12:	9e 01       	movw	r18, r28
     f14:	29 5f       	subi	r18, 0xF9	; 249
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	b9 01       	movw	r22, r18
     f1a:	45 e0       	ldi	r20, 0x05	; 5
     f1c:	0e 94 cc 06 	call	0xd98	; 0xd98 <compareArrays>
     f20:	88 23       	and	r24, r24
     f22:	c1 f4       	brne	.+48     	; 0xf54 <Check_opendoor_Password+0x76>
	{
		wait_and_sendByte(UNMATCHED_PASSWORDS);
     f24:	8d ef       	ldi	r24, 0xFD	; 253
     f26:	0e 94 8d 06 	call	0xd1a	; 0xd1a <wait_and_sendByte>

		temp=wait_and_receiveByte();
     f2a:	0e 94 a1 06 	call	0xd42	; 0xd42 <wait_and_receiveByte>
     f2e:	89 83       	std	Y+1, r24	; 0x01
		if( temp==ERROR_ACTION)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	87 3f       	cpi	r24, 0xF7	; 247
     f34:	49 f4       	brne	.+18     	; 0xf48 <Check_opendoor_Password+0x6a>
		{
			Buzzer_init();
     f36:	0e 94 b0 08 	call	0x1160	; 0x1160 <Buzzer_init>
			Buzzer_on();
     f3a:	0e 94 c1 08 	call	0x1182	; 0x1182 <Buzzer_on>

			calc_1min();
     f3e:	0e 94 ca 05 	call	0xb94	; 0xb94 <calc_1min>

			Buzzer_off();
     f42:	0e 94 cd 08 	call	0x119a	; 0x119a <Buzzer_off>
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <Check_opendoor_Password+0xc2>
		}
		else if (temp ==NO_ERROR)
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	86 3f       	cpi	r24, 0xF6	; 246
     f4c:	49 f5       	brne	.+82     	; 0xfa0 <Check_opendoor_Password+0xc2>
		{
			Check_opendoor_Password();
     f4e:	0e 94 6f 07 	call	0xede	; 0xede <Check_opendoor_Password>
     f52:	26 c0       	rjmp	.+76     	; 0xfa0 <Check_opendoor_Password+0xc2>
		}
	}

	/*if the 2 passwords are matched*/
	else if(compareArrays(entered_pass,memory_pass,5)==1)
     f54:	ce 01       	movw	r24, r28
     f56:	02 96       	adiw	r24, 0x02	; 2
     f58:	9e 01       	movw	r18, r28
     f5a:	29 5f       	subi	r18, 0xF9	; 249
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	b9 01       	movw	r22, r18
     f60:	45 e0       	ldi	r20, 0x05	; 5
     f62:	0e 94 cc 06 	call	0xd98	; 0xd98 <compareArrays>
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	d9 f4       	brne	.+54     	; 0xfa0 <Check_opendoor_Password+0xc2>
	{
		wait_and_sendByte(MATCHED_PASSWORDS);
     f6a:	8e ef       	ldi	r24, 0xFE	; 254
     f6c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <wait_and_sendByte>

	/*open the door(operate motor for 15sec CW then hold it 3sec then operate it for 15sec ACW)*/
		DcMotor_Init();
     f70:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DcMotor_Init>
		DcMotor_Rotate(DcMotor_CW,100);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	64 e6       	ldi	r22, 0x64	; 100
     f78:	0e 94 8c 08 	call	0x1118	; 0x1118 <DcMotor_Rotate>

		calc_15sec();
     f7c:	0e 94 0b 06 	call	0xc16	; 0xc16 <calc_15sec>

		DcMotor_Rotate(DcMotor_OFF,0);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	0e 94 8c 08 	call	0x1118	; 0x1118 <DcMotor_Rotate>

		calc_3sec();
     f88:	0e 94 4c 06 	call	0xc98	; 0xc98 <calc_3sec>

		DcMotor_Rotate(DcMotor_A_CW,100);
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	64 e6       	ldi	r22, 0x64	; 100
     f90:	0e 94 8c 08 	call	0x1118	; 0x1118 <DcMotor_Rotate>

		calc_15sec();
     f94:	0e 94 0b 06 	call	0xc16	; 0xc16 <calc_15sec>
		DcMotor_Rotate(DcMotor_OFF,0);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 8c 08 	call	0x1118	; 0x1118 <DcMotor_Rotate>
	}
}
     fa0:	2b 96       	adiw	r28, 0x0b	; 11
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <check_changepassword>:

/*function to receive a password then compare it with the saved one in the EEPROM
 * then send the check feedback to HMI_ECU */
void check_changepassword(void)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	2b 97       	sbiw	r28, 0x0b	; 11
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
	uint8 entered_pass[5],memory_pass[5],temp;

	/* Receive pass array from HMI_ECU through UART */
	wait_and_receiveArray(entered_pass,5);
     fc6:	ce 01       	movw	r24, r28
     fc8:	02 96       	adiw	r24, 0x02	; 2
     fca:	65 e0       	ldi	r22, 0x05	; 5
     fcc:	0e 94 b1 06 	call	0xd62	; 0xd62 <wait_and_receiveArray>

	EEPROM_readArray(PASSWORD_EEPROM_ADRS,memory_pass,5);
     fd0:	9e 01       	movw	r18, r28
     fd2:	29 5f       	subi	r18, 0xF9	; 249
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	b9 01       	movw	r22, r18
     fdc:	45 e0       	ldi	r20, 0x05	; 5
     fde:	0e 94 47 0a 	call	0x148e	; 0x148e <EEPROM_readArray>

	/*if the 2 passwords are unmatched */
	if(compareArrays(entered_pass,memory_pass,5)==0)
     fe2:	ce 01       	movw	r24, r28
     fe4:	02 96       	adiw	r24, 0x02	; 2
     fe6:	9e 01       	movw	r18, r28
     fe8:	29 5f       	subi	r18, 0xF9	; 249
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	b9 01       	movw	r22, r18
     fee:	45 e0       	ldi	r20, 0x05	; 5
     ff0:	0e 94 cc 06 	call	0xd98	; 0xd98 <compareArrays>
     ff4:	88 23       	and	r24, r24
     ff6:	c1 f4       	brne	.+48     	; 0x1028 <check_changepassword+0x76>
	{
		wait_and_sendByte(UNMATCHED_PASSWORDS);
     ff8:	8d ef       	ldi	r24, 0xFD	; 253
     ffa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <wait_and_sendByte>

		temp=wait_and_receiveByte();
     ffe:	0e 94 a1 06 	call	0xd42	; 0xd42 <wait_and_receiveByte>
    1002:	89 83       	std	Y+1, r24	; 0x01
		if( temp==ERROR_ACTION)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	87 3f       	cpi	r24, 0xF7	; 247
    1008:	49 f4       	brne	.+18     	; 0x101c <check_changepassword+0x6a>
		{
			Buzzer_init();
    100a:	0e 94 b0 08 	call	0x1160	; 0x1160 <Buzzer_init>
			Buzzer_on();
    100e:	0e 94 c1 08 	call	0x1182	; 0x1182 <Buzzer_on>

			calc_1min();
    1012:	0e 94 ca 05 	call	0xb94	; 0xb94 <calc_1min>

			Buzzer_off();
    1016:	0e 94 cd 08 	call	0x119a	; 0x119a <Buzzer_off>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <check_changepassword+0x92>
		}
		else if (temp ==NO_ERROR)
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	86 3f       	cpi	r24, 0xF6	; 246
    1020:	89 f4       	brne	.+34     	; 0x1044 <check_changepassword+0x92>
		{
			check_changepassword();
    1022:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <check_changepassword>
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <check_changepassword+0x92>
		}
	}

	/*if the 2 passwords are matched */
	else if(compareArrays(entered_pass,memory_pass,5)==1)
    1028:	ce 01       	movw	r24, r28
    102a:	02 96       	adiw	r24, 0x02	; 2
    102c:	9e 01       	movw	r18, r28
    102e:	29 5f       	subi	r18, 0xF9	; 249
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	b9 01       	movw	r22, r18
    1034:	45 e0       	ldi	r20, 0x05	; 5
    1036:	0e 94 cc 06 	call	0xd98	; 0xd98 <compareArrays>
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	19 f4       	brne	.+6      	; 0x1044 <check_changepassword+0x92>
	{
		wait_and_sendByte(MATCHED_PASSWORDS);
    103e:	8e ef       	ldi	r24, 0xFE	; 254
    1040:	0e 94 8d 06 	call	0xd1a	; 0xd1a <wait_and_sendByte>
	}
}
    1044:	2b 96       	adiw	r28, 0x0b	; 11
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <main>:

int main()
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	2d 97       	sbiw	r28, 0x0d	; 13
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
	uint8 choice;

	SREG |=(1<<7);/*enable I-Bit for timer interrupt*/
    106a:	af e5       	ldi	r26, 0x5F	; 95
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ef e5       	ldi	r30, 0x5F	; 95
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	80 68       	ori	r24, 0x80	; 128
    1076:	8c 93       	st	X, r24

	UART_ConfigType UART_Frame={Eight_Bits,Even_Parity,One_StopBit,9600};
    1078:	ce 01       	movw	r24, r28
    107a:	02 96       	adiw	r24, 0x02	; 2
    107c:	9a 87       	std	Y+10, r25	; 0x0a
    107e:	89 87       	std	Y+9, r24	; 0x09
    1080:	ef e7       	ldi	r30, 0x7F	; 127
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	fc 87       	std	Y+12, r31	; 0x0c
    1086:	eb 87       	std	Y+11, r30	; 0x0b
    1088:	f7 e0       	ldi	r31, 0x07	; 7
    108a:	fd 87       	std	Y+13, r31	; 0x0d
    108c:	eb 85       	ldd	r30, Y+11	; 0x0b
    108e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1090:	00 80       	ld	r0, Z
    1092:	8b 85       	ldd	r24, Y+11	; 0x0b
    1094:	9c 85       	ldd	r25, Y+12	; 0x0c
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	9c 87       	std	Y+12, r25	; 0x0c
    109a:	8b 87       	std	Y+11, r24	; 0x0b
    109c:	e9 85       	ldd	r30, Y+9	; 0x09
    109e:	fa 85       	ldd	r31, Y+10	; 0x0a
    10a0:	00 82       	st	Z, r0
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	9a 87       	std	Y+10, r25	; 0x0a
    10aa:	89 87       	std	Y+9, r24	; 0x09
    10ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ae:	91 50       	subi	r25, 0x01	; 1
    10b0:	9d 87       	std	Y+13, r25	; 0x0d
    10b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    10b4:	ee 23       	and	r30, r30
    10b6:	51 f7       	brne	.-44     	; 0x108c <main+0x36>
	UART_init(&UART_Frame);
    10b8:	ce 01       	movw	r24, r28
    10ba:	02 96       	adiw	r24, 0x02	; 2
    10bc:	0e 94 51 10 	call	0x20a2	; 0x20a2 <UART_init>

	while(1)
	{
		Check_Created_Password();
    10c0:	0e 94 06 07 	call	0xe0c	; 0xe0c <Check_Created_Password>

		choice=wait_and_receiveByte();
    10c4:	0e 94 a1 06 	call	0xd42	; 0xd42 <wait_and_receiveByte>
    10c8:	89 83       	std	Y+1, r24	; 0x01

		if(choice ==OPEN_DOOR)
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	85 3f       	cpi	r24, 0xF5	; 245
    10ce:	19 f4       	brne	.+6      	; 0x10d6 <main+0x80>
			Check_opendoor_Password();
    10d0:	0e 94 6f 07 	call	0xede	; 0xede <Check_opendoor_Password>
    10d4:	f5 cf       	rjmp	.-22     	; 0x10c0 <main+0x6a>
		else if(choice==CHANGE_PASS)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	84 3f       	cpi	r24, 0xF4	; 244
    10da:	91 f7       	brne	.-28     	; 0x10c0 <main+0x6a>
			check_changepassword();
    10dc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <check_changepassword>
    10e0:	ef cf       	rjmp	.-34     	; 0x10c0 <main+0x6a>

000010e2 <DcMotor_Init>:
#include "gpio.h" /*to use GPIO_setupPinDirection and GPIO_writePin functions*/
#include <avr/io.h> /* to use PORT registers*/
#include "pwm.h" /* to use PWM_Timer0_Generate function to control speed of the motor*/

void DcMotor_Init(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	/*set 2 pins of the motor as output pins*/
	GPIO_setupPinDirection(DC_motor_IN_PORT_ID,DC_motor_IN1_PIN_ID,PIN_OUTPUT);
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	63 e0       	ldi	r22, 0x03	; 3
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_motor_IN_PORT_ID,DC_motor_IN2_PIN_ID,PIN_OUTPUT);
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	64 e0       	ldi	r22, 0x04	; 4
    10f8:	41 e0       	ldi	r20, 0x01	; 1
    10fa:	0e 94 4b 0b 	call	0x1696	; 0x1696 <GPIO_setupPinDirection>

	/*initially stop the motor */
	GPIO_writePin(DC_motor_IN_PORT_ID,DC_motor_IN1_PIN_ID,LOGIC_LOW);
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	63 e0       	ldi	r22, 0x03	; 3
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_writePin>
	GPIO_writePin(DC_motor_IN_PORT_ID,DC_motor_IN2_PIN_ID,LOGIC_LOW);
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	64 e0       	ldi	r22, 0x04	; 4
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_writePin>
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed_percent)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <DcMotor_Rotate+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	6a 83       	std	Y+2, r22	; 0x02
	/*set enable pin of the motor as output pin*/
	GPIO_setupPinDirection(DC_motor_EN_PORT_ID,DC_motor_EN1_PIN_ID,PIN_OUTPUT);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	63 e0       	ldi	r22, 0x03	; 3
    112a:	41 e0       	ldi	r20, 0x01	; 1
    112c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <GPIO_setupPinDirection>

	/*write the state of the motor in IN1 pin */
	GPIO_writePin(DC_motor_IN_PORT_ID,DC_motor_IN1_PIN_ID,state>>1);
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	98 2f       	mov	r25, r24
    1134:	96 95       	lsr	r25
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	63 e0       	ldi	r22, 0x03	; 3
    113a:	49 2f       	mov	r20, r25
    113c:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_writePin>

	/*write the state of the motor in IN2 pin */
	GPIO_writePin(DC_motor_IN_PORT_ID,DC_motor_IN2_PIN_ID,state &1);
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	98 2f       	mov	r25, r24
    1144:	91 70       	andi	r25, 0x01	; 1
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	64 e0       	ldi	r22, 0x04	; 4
    114a:	49 2f       	mov	r20, r25
    114c:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_writePin>

	/*generate pwm signal with duty cycle base on the passed value (speed_percent)*/
	PWM_Timer0_Generate(speed_percent);
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <PWM_Timer0_Generate>
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <Buzzer_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Buzzer_init(void)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_writePin>
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <Buzzer_on>:

void Buzzer_on(void)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_writePin>
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <Buzzer_off>:

void Buzzer_off(void)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	0e 94 36 0c 	call	0x186c	; 0x186c <GPIO_writePin>
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"
#include <util/delay.h> // for delay function

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <EEPROM_writeByte+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <EEPROM_writeByte+0x8>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11c4:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11c8:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    11cc:	88 30       	cpi	r24, 0x08	; 8
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <EEPROM_writeByte+0x22>
        return ERROR;
    11d0:	1c 82       	std	Y+4, r1	; 0x04
    11d2:	28 c0       	rjmp	.+80     	; 0x1224 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	80 70       	andi	r24, 0x00	; 0
    11da:	97 70       	andi	r25, 0x07	; 7
    11dc:	88 0f       	add	r24, r24
    11de:	89 2f       	mov	r24, r25
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 0b       	sbc	r25, r25
    11e4:	91 95       	neg	r25
    11e6:	80 6a       	ori	r24, 0xA0	; 160
    11e8:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11ec:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    11f0:	88 31       	cpi	r24, 0x18	; 24
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <EEPROM_writeByte+0x46>
        return ERROR; 
    11f4:	1c 82       	std	Y+4, r1	; 0x04
    11f6:	16 c0       	rjmp	.+44     	; 0x1224 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11fe:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1202:	88 32       	cpi	r24, 0x28	; 40
    1204:	11 f0       	breq	.+4      	; 0x120a <EEPROM_writeByte+0x58>
        return ERROR;
    1206:	1c 82       	std	Y+4, r1	; 0x04
    1208:	0d c0       	rjmp	.+26     	; 0x1224 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1210:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1214:	88 32       	cpi	r24, 0x28	; 40
    1216:	11 f0       	breq	.+4      	; 0x121c <EEPROM_writeByte+0x6a>
        return ERROR;
    1218:	1c 82       	std	Y+4, r1	; 0x04
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    121c:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TWI_stop>
	
    return SUCCESS;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	8c 83       	std	Y+4, r24	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <EEPROM_readByte+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <EEPROM_readByte+0x8>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	7c 83       	std	Y+4, r23	; 0x04
    1248:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    124a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    124e:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1252:	88 30       	cpi	r24, 0x08	; 8
    1254:	11 f0       	breq	.+4      	; 0x125a <EEPROM_readByte+0x26>
        return ERROR;
    1256:	1d 82       	std	Y+5, r1	; 0x05
    1258:	44 c0       	rjmp	.+136    	; 0x12e2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	80 70       	andi	r24, 0x00	; 0
    1260:	97 70       	andi	r25, 0x07	; 7
    1262:	88 0f       	add	r24, r24
    1264:	89 2f       	mov	r24, r25
    1266:	88 1f       	adc	r24, r24
    1268:	99 0b       	sbc	r25, r25
    126a:	91 95       	neg	r25
    126c:	80 6a       	ori	r24, 0xA0	; 160
    126e:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1272:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1276:	88 31       	cpi	r24, 0x18	; 24
    1278:	11 f0       	breq	.+4      	; 0x127e <EEPROM_readByte+0x4a>
        return ERROR;
    127a:	1d 82       	std	Y+5, r1	; 0x05
    127c:	32 c0       	rjmp	.+100    	; 0x12e2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1284:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1288:	88 32       	cpi	r24, 0x28	; 40
    128a:	11 f0       	breq	.+4      	; 0x1290 <EEPROM_readByte+0x5c>
        return ERROR;
    128c:	1d 82       	std	Y+5, r1	; 0x05
    128e:	29 c0       	rjmp	.+82     	; 0x12e2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1290:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1294:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1298:	80 31       	cpi	r24, 0x10	; 16
    129a:	11 f0       	breq	.+4      	; 0x12a0 <EEPROM_readByte+0x6c>
        return ERROR;
    129c:	1d 82       	std	Y+5, r1	; 0x05
    129e:	21 c0       	rjmp	.+66     	; 0x12e2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	80 70       	andi	r24, 0x00	; 0
    12a6:	97 70       	andi	r25, 0x07	; 7
    12a8:	88 0f       	add	r24, r24
    12aa:	89 2f       	mov	r24, r25
    12ac:	88 1f       	adc	r24, r24
    12ae:	99 0b       	sbc	r25, r25
    12b0:	91 95       	neg	r25
    12b2:	81 6a       	ori	r24, 0xA1	; 161
    12b4:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12b8:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    12bc:	80 34       	cpi	r24, 0x40	; 64
    12be:	11 f0       	breq	.+4      	; 0x12c4 <EEPROM_readByte+0x90>
        return ERROR;
    12c0:	1d 82       	std	Y+5, r1	; 0x05
    12c2:	0f c0       	rjmp	.+30     	; 0x12e2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12c4:	0e 94 2f 10 	call	0x205e	; 0x205e <TWI_readByteWithNACK>
    12c8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ca:	fc 81       	ldd	r31, Y+4	; 0x04
    12cc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12ce:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    12d2:	88 35       	cpi	r24, 0x58	; 88
    12d4:	11 f0       	breq	.+4      	; 0x12da <EEPROM_readByte+0xa6>
        return ERROR;
    12d6:	1d 82       	std	Y+5, r1	; 0x05
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    12da:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TWI_stop>

    return SUCCESS;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <EEPROM_writeArray>:

uint8 EEPROM_writeArray(uint16 u16addr,uint8*arr,uint8 size)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	65 97       	sbiw	r28, 0x15	; 21
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	99 8b       	std	Y+17, r25	; 0x11
    130a:	88 8b       	std	Y+16, r24	; 0x10
    130c:	7b 8b       	std	Y+19, r23	; 0x13
    130e:	6a 8b       	std	Y+18, r22	; 0x12
    1310:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i;

	/* Send the Start Bit */
    TWI_start();
    1312:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1316:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    131a:	88 30       	cpi	r24, 0x08	; 8
    131c:	11 f0       	breq	.+4      	; 0x1322 <EEPROM_writeArray+0x2e>
        return ERROR;
    131e:	1d 8a       	std	Y+21, r1	; 0x15
    1320:	ac c0       	rjmp	.+344    	; 0x147a <EEPROM_writeArray+0x186>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1322:	88 89       	ldd	r24, Y+16	; 0x10
    1324:	99 89       	ldd	r25, Y+17	; 0x11
    1326:	80 70       	andi	r24, 0x00	; 0
    1328:	97 70       	andi	r25, 0x07	; 7
    132a:	88 0f       	add	r24, r24
    132c:	89 2f       	mov	r24, r25
    132e:	88 1f       	adc	r24, r24
    1330:	99 0b       	sbc	r25, r25
    1332:	91 95       	neg	r25
    1334:	80 6a       	ori	r24, 0xA0	; 160
    1336:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    133a:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    133e:	88 31       	cpi	r24, 0x18	; 24
    1340:	11 f0       	breq	.+4      	; 0x1346 <EEPROM_writeArray+0x52>
        return ERROR;
    1342:	1d 8a       	std	Y+21, r1	; 0x15
    1344:	9a c0       	rjmp	.+308    	; 0x147a <EEPROM_writeArray+0x186>

    /* Send the required memory location address of first element of the array*/
    TWI_writeByte((uint8)(u16addr));
    1346:	88 89       	ldd	r24, Y+16	; 0x10
    1348:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    134c:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1350:	88 32       	cpi	r24, 0x28	; 40
    1352:	11 f0       	breq	.+4      	; 0x1358 <EEPROM_writeArray+0x64>
        return ERROR;
    1354:	1d 8a       	std	Y+21, r1	; 0x15
    1356:	91 c0       	rjmp	.+290    	; 0x147a <EEPROM_writeArray+0x186>

    for(i=0;i<size;i++)
    1358:	1f 86       	std	Y+15, r1	; 0x0f
    135a:	86 c0       	rjmp	.+268    	; 0x1468 <EEPROM_writeArray+0x174>
    {
        /* write byte to eeprom */
        TWI_writeByte(arr[i]);
    135c:	8f 85       	ldd	r24, Y+15	; 0x0f
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	8a 89       	ldd	r24, Y+18	; 0x12
    1364:	9b 89       	ldd	r25, Y+19	; 0x13
    1366:	fc 01       	movw	r30, r24
    1368:	e2 0f       	add	r30, r18
    136a:	f3 1f       	adc	r31, r19
    136c:	80 81       	ld	r24, Z
    136e:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
        if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1372:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1376:	88 32       	cpi	r24, 0x28	; 40
    1378:	11 f0       	breq	.+4      	; 0x137e <EEPROM_writeArray+0x8a>
            return ERROR;
    137a:	1d 8a       	std	Y+21, r1	; 0x15
    137c:	7e c0       	rjmp	.+252    	; 0x147a <EEPROM_writeArray+0x186>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e2       	ldi	r26, 0x20	; 32
    1384:	b1 e4       	ldi	r27, 0x41	; 65
    1386:	8b 87       	std	Y+11, r24	; 0x0b
    1388:	9c 87       	std	Y+12, r25	; 0x0c
    138a:	ad 87       	std	Y+13, r26	; 0x0d
    138c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1390:	7c 85       	ldd	r23, Y+12	; 0x0c
    1392:	8d 85       	ldd	r24, Y+13	; 0x0d
    1394:	9e 85       	ldd	r25, Y+14	; 0x0e
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a ef       	ldi	r20, 0xFA	; 250
    139c:	54 e4       	ldi	r21, 0x44	; 68
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	8f 83       	std	Y+7, r24	; 0x07
    13a8:	98 87       	std	Y+8, r25	; 0x08
    13aa:	a9 87       	std	Y+9, r26	; 0x09
    13ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <EEPROM_writeArray+0xdc>
		__ticks = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <EEPROM_writeArray+0x15a>
	else if (__tmp > 65535)
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
    13d2:	78 85       	ldd	r23, Y+8	; 0x08
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	3f ef       	ldi	r19, 0xFF	; 255
    13dc:	4f e7       	ldi	r20, 0x7F	; 127
    13de:	57 e4       	ldi	r21, 0x47	; 71
    13e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	4c f5       	brge	.+82     	; 0x143a <EEPROM_writeArray+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <EEPROM_writeArray+0x13c>
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9c 83       	std	Y+4, r25	; 0x04
    1418:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <EEPROM_writeArray+0x12a>
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f7       	brne	.-38     	; 0x1412 <EEPROM_writeArray+0x11e>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <EEPROM_writeArray+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	6f 81       	ldd	r22, Y+7	; 0x07
    143c:	78 85       	ldd	r23, Y+8	; 0x08
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <EEPROM_writeArray+0x166>
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
    /* Send the required memory location address of first element of the array*/
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;

    for(i=0;i<size;i++)
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	8f 87       	std	Y+15, r24	; 0x0f
    1468:	9f 85       	ldd	r25, Y+15	; 0x0f
    146a:	8c 89       	ldd	r24, Y+20	; 0x14
    146c:	98 17       	cp	r25, r24
    146e:	08 f4       	brcc	.+2      	; 0x1472 <EEPROM_writeArray+0x17e>
    1470:	75 cf       	rjmp	.-278    	; 0x135c <EEPROM_writeArray+0x68>
            return ERROR;
        _delay_ms(10);
    }

    /* Send the Stop Bit */
    TWI_stop();
    1472:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TWI_stop>

    return SUCCESS;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	8d 8b       	std	Y+21, r24	; 0x15
    147a:	8d 89       	ldd	r24, Y+21	; 0x15
}
    147c:	65 96       	adiw	r28, 0x15	; 21
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <EEPROM_readArray>:

uint8 EEPROM_readArray(uint16 u16addr,uint8*arr,uint8 size)
{
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	65 97       	sbiw	r28, 0x15	; 21
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	99 8b       	std	Y+17, r25	; 0x11
    14a8:	88 8b       	std	Y+16, r24	; 0x10
    14aa:	7b 8b       	std	Y+19, r23	; 0x13
    14ac:	6a 8b       	std	Y+18, r22	; 0x12
    14ae:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i;

	/* Send the Start Bit */
    TWI_start();
    14b0:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14b4:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    14b8:	88 30       	cpi	r24, 0x08	; 8
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <EEPROM_readArray+0x32>
        return ERROR;
    14bc:	1d 8a       	std	Y+21, r1	; 0x15
    14be:	df c0       	rjmp	.+446    	; 0x167e <EEPROM_readArray+0x1f0>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14c0:	88 89       	ldd	r24, Y+16	; 0x10
    14c2:	99 89       	ldd	r25, Y+17	; 0x11
    14c4:	80 70       	andi	r24, 0x00	; 0
    14c6:	97 70       	andi	r25, 0x07	; 7
    14c8:	88 0f       	add	r24, r24
    14ca:	89 2f       	mov	r24, r25
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 0b       	sbc	r25, r25
    14d0:	91 95       	neg	r25
    14d2:	80 6a       	ori	r24, 0xA0	; 160
    14d4:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14d8:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    14dc:	88 31       	cpi	r24, 0x18	; 24
    14de:	11 f0       	breq	.+4      	; 0x14e4 <EEPROM_readArray+0x56>
        return ERROR;
    14e0:	1d 8a       	std	Y+21, r1	; 0x15
    14e2:	cd c0       	rjmp	.+410    	; 0x167e <EEPROM_readArray+0x1f0>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    14e4:	88 89       	ldd	r24, Y+16	; 0x10
    14e6:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14ea:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    14ee:	88 32       	cpi	r24, 0x28	; 40
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <EEPROM_readArray+0x68>
        return ERROR;
    14f2:	1d 8a       	std	Y+21, r1	; 0x15
    14f4:	c4 c0       	rjmp	.+392    	; 0x167e <EEPROM_readArray+0x1f0>

    /* Send the Repeated Start Bit */
    TWI_start();
    14f6:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    14fa:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    14fe:	80 31       	cpi	r24, 0x10	; 16
    1500:	11 f0       	breq	.+4      	; 0x1506 <EEPROM_readArray+0x78>
        return ERROR;
    1502:	1d 8a       	std	Y+21, r1	; 0x15
    1504:	bc c0       	rjmp	.+376    	; 0x167e <EEPROM_readArray+0x1f0>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1506:	88 89       	ldd	r24, Y+16	; 0x10
    1508:	99 89       	ldd	r25, Y+17	; 0x11
    150a:	80 70       	andi	r24, 0x00	; 0
    150c:	97 70       	andi	r25, 0x07	; 7
    150e:	88 0f       	add	r24, r24
    1510:	89 2f       	mov	r24, r25
    1512:	88 1f       	adc	r24, r24
    1514:	99 0b       	sbc	r25, r25
    1516:	91 95       	neg	r25
    1518:	81 6a       	ori	r24, 0xA1	; 161
    151a:	0e 94 05 10 	call	0x200a	; 0x200a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    151e:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    1522:	80 34       	cpi	r24, 0x40	; 64
    1524:	11 f0       	breq	.+4      	; 0x152a <EEPROM_readArray+0x9c>
        return ERROR;
    1526:	1d 8a       	std	Y+21, r1	; 0x15
    1528:	aa c0       	rjmp	.+340    	; 0x167e <EEPROM_readArray+0x1f0>

    for(i=0;i<size-1;i++)
    152a:	1f 86       	std	Y+15, r1	; 0x0f
    152c:	87 c0       	rjmp	.+270    	; 0x163c <EEPROM_readArray+0x1ae>
    {
        /* Read Byte from Memory and send ACK */
        arr[i] = TWI_readByteWithACK();
    152e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8a 89       	ldd	r24, Y+18	; 0x12
    1536:	9b 89       	ldd	r25, Y+19	; 0x13
    1538:	8c 01       	movw	r16, r24
    153a:	02 0f       	add	r16, r18
    153c:	13 1f       	adc	r17, r19
    153e:	0e 94 1c 10 	call	0x2038	; 0x2038 <TWI_readByteWithACK>
    1542:	f8 01       	movw	r30, r16
    1544:	80 83       	st	Z, r24
        if (TWI_getStatus() != TWI_MR_DATA_ACK)
    1546:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    154a:	80 35       	cpi	r24, 0x50	; 80
    154c:	11 f0       	breq	.+4      	; 0x1552 <EEPROM_readArray+0xc4>
            return ERROR;
    154e:	1d 8a       	std	Y+21, r1	; 0x15
    1550:	96 c0       	rjmp	.+300    	; 0x167e <EEPROM_readArray+0x1f0>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e2       	ldi	r26, 0x20	; 32
    1558:	b1 e4       	ldi	r27, 0x41	; 65
    155a:	8b 87       	std	Y+11, r24	; 0x0b
    155c:	9c 87       	std	Y+12, r25	; 0x0c
    155e:	ad 87       	std	Y+13, r26	; 0x0d
    1560:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	6b 85       	ldd	r22, Y+11	; 0x0b
    1564:	7c 85       	ldd	r23, Y+12	; 0x0c
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4a ef       	ldi	r20, 0xFA	; 250
    1570:	54 e4       	ldi	r21, 0x44	; 68
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8f 83       	std	Y+7, r24	; 0x07
    157c:	98 87       	std	Y+8, r25	; 0x08
    157e:	a9 87       	std	Y+9, r26	; 0x09
    1580:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <EEPROM_readArray+0x116>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <EEPROM_readArray+0x194>
	else if (__tmp > 65535)
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <EEPROM_readArray+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15be:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <EEPROM_readArray+0x176>
    15e6:	88 ec       	ldi	r24, 0xC8	; 200
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <EEPROM_readArray+0x164>
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <EEPROM_readArray+0x158>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <EEPROM_readArray+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <EEPROM_readArray+0x1a0>
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;

    for(i=0;i<size-1;i++)
    1636:	8f 85       	ldd	r24, Y+15	; 0x0f
    1638:	8f 5f       	subi	r24, 0xFF	; 255
    163a:	8f 87       	std	Y+15, r24	; 0x0f
    163c:	8f 85       	ldd	r24, Y+15	; 0x0f
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8c 89       	ldd	r24, Y+20	; 0x14
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	28 17       	cp	r18, r24
    164c:	39 07       	cpc	r19, r25
    164e:	0c f4       	brge	.+2      	; 0x1652 <EEPROM_readArray+0x1c4>
    1650:	6e cf       	rjmp	.-292    	; 0x152e <EEPROM_readArray+0xa0>
            return ERROR;
        _delay_ms(10);
    }

    /* Read the last Byte from Memory without send ACK */
    arr[i] = TWI_readByteWithNACK();
    1652:	8f 85       	ldd	r24, Y+15	; 0x0f
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	8a 89       	ldd	r24, Y+18	; 0x12
    165a:	9b 89       	ldd	r25, Y+19	; 0x13
    165c:	8c 01       	movw	r16, r24
    165e:	02 0f       	add	r16, r18
    1660:	13 1f       	adc	r17, r19
    1662:	0e 94 2f 10 	call	0x205e	; 0x205e <TWI_readByteWithNACK>
    1666:	f8 01       	movw	r30, r16
    1668:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    166a:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_getStatus>
    166e:	88 35       	cpi	r24, 0x58	; 88
    1670:	11 f0       	breq	.+4      	; 0x1676 <EEPROM_readArray+0x1e8>
        return ERROR;
    1672:	1d 8a       	std	Y+21, r1	; 0x15
    1674:	04 c0       	rjmp	.+8      	; 0x167e <EEPROM_readArray+0x1f0>

    /* Send the Stop Bit */
    TWI_stop();
    1676:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TWI_stop>

    return SUCCESS;
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	fd 8b       	std	Y+21, r31	; 0x15
    167e:	8d 89       	ldd	r24, Y+21	; 0x15
}
    1680:	65 96       	adiw	r28, 0x15	; 21
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	08 95       	ret

00001696 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_setupPinDirection+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <GPIO_setupPinDirection+0x8>
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	6a 83       	std	Y+2, r22	; 0x02
    16a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	88 30       	cpi	r24, 0x08	; 8
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <GPIO_setupPinDirection+0x1c>
    16b0:	d5 c0       	rjmp	.+426    	; 0x185c <GPIO_setupPinDirection+0x1c6>
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <GPIO_setupPinDirection+0x24>
    16b8:	d1 c0       	rjmp	.+418    	; 0x185c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 83       	std	Y+5, r19	; 0x05
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <GPIO_setupPinDirection+0x3a>
    16ce:	43 c0       	rjmp	.+134    	; 0x1756 <GPIO_setupPinDirection+0xc0>
    16d0:	2c 81       	ldd	r18, Y+4	; 0x04
    16d2:	3d 81       	ldd	r19, Y+5	; 0x05
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <GPIO_setupPinDirection+0x4e>
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	71 f0       	breq	.+28     	; 0x16fe <GPIO_setupPinDirection+0x68>
    16e2:	bc c0       	rjmp	.+376    	; 0x185c <GPIO_setupPinDirection+0x1c6>
    16e4:	2c 81       	ldd	r18, Y+4	; 0x04
    16e6:	3d 81       	ldd	r19, Y+5	; 0x05
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <GPIO_setupPinDirection+0x5a>
    16ee:	5f c0       	rjmp	.+190    	; 0x17ae <GPIO_setupPinDirection+0x118>
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <GPIO_setupPinDirection+0x66>
    16fa:	85 c0       	rjmp	.+266    	; 0x1806 <GPIO_setupPinDirection+0x170>
    16fc:	af c0       	rjmp	.+350    	; 0x185c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	a1 f4       	brne	.+40     	; 0x172c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1704:	aa e3       	ldi	r26, 0x3A	; 58
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ea e3       	ldi	r30, 0x3A	; 58
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_setupPinDirection+0x8c>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_setupPinDirection+0x88>
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	98 c0       	rjmp	.+304    	; 0x185c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    172c:	aa e3       	ldi	r26, 0x3A	; 58
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ea e3       	ldi	r30, 0x3A	; 58
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_setupPinDirection+0xb4>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_setupPinDirection+0xb0>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	83 c0       	rjmp	.+262    	; 0x185c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	a1 f4       	brne	.+40     	; 0x1784 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    175c:	a7 e3       	ldi	r26, 0x37	; 55
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e7 e3       	ldi	r30, 0x37	; 55
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_setupPinDirection+0xe4>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_setupPinDirection+0xe0>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	6c c0       	rjmp	.+216    	; 0x185c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1784:	a7 e3       	ldi	r26, 0x37	; 55
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e7 e3       	ldi	r30, 0x37	; 55
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_setupPinDirection+0x10c>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_setupPinDirection+0x108>
    17a6:	80 95       	com	r24
    17a8:	84 23       	and	r24, r20
    17aa:	8c 93       	st	X, r24
    17ac:	57 c0       	rjmp	.+174    	; 0x185c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	a1 f4       	brne	.+40     	; 0x17dc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17b4:	a4 e3       	ldi	r26, 0x34	; 52
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e4 e3       	ldi	r30, 0x34	; 52
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <GPIO_setupPinDirection+0x13c>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <GPIO_setupPinDirection+0x138>
    17d6:	84 2b       	or	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	40 c0       	rjmp	.+128    	; 0x185c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17dc:	a4 e3       	ldi	r26, 0x34	; 52
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e4 e3       	ldi	r30, 0x34	; 52
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <GPIO_setupPinDirection+0x164>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <GPIO_setupPinDirection+0x160>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	2b c0       	rjmp	.+86     	; 0x185c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	a1 f4       	brne	.+40     	; 0x1834 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    180c:	a1 e3       	ldi	r26, 0x31	; 49
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e1 e3       	ldi	r30, 0x31	; 49
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <GPIO_setupPinDirection+0x194>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <GPIO_setupPinDirection+0x190>
    182e:	84 2b       	or	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	14 c0       	rjmp	.+40     	; 0x185c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1834:	a1 e3       	ldi	r26, 0x31	; 49
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e1 e3       	ldi	r30, 0x31	; 49
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <GPIO_setupPinDirection+0x1bc>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <GPIO_setupPinDirection+0x1b8>
    1856:	80 95       	com	r24
    1858:	84 23       	and	r24, r20
    185a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <GPIO_writePin+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <GPIO_writePin+0x8>
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	6a 83       	std	Y+2, r22	; 0x02
    187e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	88 30       	cpi	r24, 0x08	; 8
    1884:	08 f0       	brcs	.+2      	; 0x1888 <GPIO_writePin+0x1c>
    1886:	d5 c0       	rjmp	.+426    	; 0x1a32 <GPIO_writePin+0x1c6>
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	84 30       	cpi	r24, 0x04	; 4
    188c:	08 f0       	brcs	.+2      	; 0x1890 <GPIO_writePin+0x24>
    188e:	d1 c0       	rjmp	.+418    	; 0x1a32 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	3d 83       	std	Y+5, r19	; 0x05
    1898:	2c 83       	std	Y+4, r18	; 0x04
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	91 05       	cpc	r25, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <GPIO_writePin+0x3a>
    18a4:	43 c0       	rjmp	.+134    	; 0x192c <GPIO_writePin+0xc0>
    18a6:	2c 81       	ldd	r18, Y+4	; 0x04
    18a8:	3d 81       	ldd	r19, Y+5	; 0x05
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	2c f4       	brge	.+10     	; 0x18ba <GPIO_writePin+0x4e>
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	9d 81       	ldd	r25, Y+5	; 0x05
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	71 f0       	breq	.+28     	; 0x18d4 <GPIO_writePin+0x68>
    18b8:	bc c0       	rjmp	.+376    	; 0x1a32 <GPIO_writePin+0x1c6>
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	3d 81       	ldd	r19, Y+5	; 0x05
    18be:	22 30       	cpi	r18, 0x02	; 2
    18c0:	31 05       	cpc	r19, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <GPIO_writePin+0x5a>
    18c4:	5f c0       	rjmp	.+190    	; 0x1984 <GPIO_writePin+0x118>
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	91 05       	cpc	r25, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <GPIO_writePin+0x66>
    18d0:	85 c0       	rjmp	.+266    	; 0x19dc <GPIO_writePin+0x170>
    18d2:	af c0       	rjmp	.+350    	; 0x1a32 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	a1 f4       	brne	.+40     	; 0x1902 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18da:	ab e3       	ldi	r26, 0x3B	; 59
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	eb e3       	ldi	r30, 0x3B	; 59
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_writePin+0x8c>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_writePin+0x88>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	98 c0       	rjmp	.+304    	; 0x1a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1902:	ab e3       	ldi	r26, 0x3B	; 59
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	eb e3       	ldi	r30, 0x3B	; 59
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_writePin+0xb4>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_writePin+0xb0>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	83 c0       	rjmp	.+262    	; 0x1a32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	a1 f4       	brne	.+40     	; 0x195a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1932:	a8 e3       	ldi	r26, 0x38	; 56
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e8 e3       	ldi	r30, 0x38	; 56
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <GPIO_writePin+0xe4>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <GPIO_writePin+0xe0>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	6c c0       	rjmp	.+216    	; 0x1a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    195a:	a8 e3       	ldi	r26, 0x38	; 56
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e8 e3       	ldi	r30, 0x38	; 56
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_writePin+0x10c>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_writePin+0x108>
    197c:	80 95       	com	r24
    197e:	84 23       	and	r24, r20
    1980:	8c 93       	st	X, r24
    1982:	57 c0       	rjmp	.+174    	; 0x1a32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	a1 f4       	brne	.+40     	; 0x19b2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    198a:	a5 e3       	ldi	r26, 0x35	; 53
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e5 e3       	ldi	r30, 0x35	; 53
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <GPIO_writePin+0x13c>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <GPIO_writePin+0x138>
    19ac:	84 2b       	or	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	40 c0       	rjmp	.+128    	; 0x1a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19b2:	a5 e3       	ldi	r26, 0x35	; 53
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e5 e3       	ldi	r30, 0x35	; 53
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_writePin+0x164>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_writePin+0x160>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	2b c0       	rjmp	.+86     	; 0x1a32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	a1 f4       	brne	.+40     	; 0x1a0a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19e2:	a2 e3       	ldi	r26, 0x32	; 50
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e2 e3       	ldi	r30, 0x32	; 50
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <GPIO_writePin+0x194>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <GPIO_writePin+0x190>
    1a04:	84 2b       	or	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a0a:	a2 e3       	ldi	r26, 0x32	; 50
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e2 e3       	ldi	r30, 0x32	; 50
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <GPIO_writePin+0x1bc>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <GPIO_writePin+0x1b8>
    1a2c:	80 95       	com	r24
    1a2e:	84 23       	and	r24, r20
    1a30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_readPin+0x6>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <GPIO_readPin+0x8>
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	8a 83       	std	Y+2, r24	; 0x02
    1a52:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a54:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	88 30       	cpi	r24, 0x08	; 8
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <GPIO_readPin+0x1c>
    1a5c:	84 c0       	rjmp	.+264    	; 0x1b66 <GPIO_readPin+0x124>
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	08 f0       	brcs	.+2      	; 0x1a66 <GPIO_readPin+0x24>
    1a64:	80 c0       	rjmp	.+256    	; 0x1b66 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3d 83       	std	Y+5, r19	; 0x05
    1a6e:	2c 83       	std	Y+4, r18	; 0x04
    1a70:	4c 81       	ldd	r20, Y+4	; 0x04
    1a72:	5d 81       	ldd	r21, Y+5	; 0x05
    1a74:	41 30       	cpi	r20, 0x01	; 1
    1a76:	51 05       	cpc	r21, r1
    1a78:	79 f1       	breq	.+94     	; 0x1ad8 <GPIO_readPin+0x96>
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	91 05       	cpc	r25, r1
    1a82:	34 f4       	brge	.+12     	; 0x1a90 <GPIO_readPin+0x4e>
    1a84:	2c 81       	ldd	r18, Y+4	; 0x04
    1a86:	3d 81       	ldd	r19, Y+5	; 0x05
    1a88:	21 15       	cp	r18, r1
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <GPIO_readPin+0x66>
    1a8e:	6b c0       	rjmp	.+214    	; 0x1b66 <GPIO_readPin+0x124>
    1a90:	4c 81       	ldd	r20, Y+4	; 0x04
    1a92:	5d 81       	ldd	r21, Y+5	; 0x05
    1a94:	42 30       	cpi	r20, 0x02	; 2
    1a96:	51 05       	cpc	r21, r1
    1a98:	b9 f1       	breq	.+110    	; 0x1b08 <GPIO_readPin+0xc6>
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <GPIO_readPin+0x64>
    1aa4:	49 c0       	rjmp	.+146    	; 0x1b38 <GPIO_readPin+0xf6>
    1aa6:	5f c0       	rjmp	.+190    	; 0x1b66 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1aa8:	e9 e3       	ldi	r30, 0x39	; 57
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <GPIO_readPin+0x7e>
    1abc:	55 95       	asr	r21
    1abe:	47 95       	ror	r20
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <GPIO_readPin+0x7a>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	88 23       	and	r24, r24
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	49 c0       	rjmp	.+146    	; 0x1b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad4:	19 82       	std	Y+1, r1	; 0x01
    1ad6:	47 c0       	rjmp	.+142    	; 0x1b66 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ad8:	e6 e3       	ldi	r30, 0x36	; 54
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <GPIO_readPin+0xae>
    1aec:	55 95       	asr	r21
    1aee:	47 95       	ror	r20
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <GPIO_readPin+0xaa>
    1af4:	ca 01       	movw	r24, r20
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	31 c0       	rjmp	.+98     	; 0x1b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b04:	19 82       	std	Y+1, r1	; 0x01
    1b06:	2f c0       	rjmp	.+94     	; 0x1b66 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b08:	e3 e3       	ldi	r30, 0x33	; 51
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <GPIO_readPin+0xde>
    1b1c:	55 95       	asr	r21
    1b1e:	47 95       	ror	r20
    1b20:	8a 95       	dec	r24
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <GPIO_readPin+0xda>
    1b24:	ca 01       	movw	r24, r20
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	88 23       	and	r24, r24
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	19 c0       	rjmp	.+50     	; 0x1b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	17 c0       	rjmp	.+46     	; 0x1b66 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b38:	e0 e3       	ldi	r30, 0x30	; 48
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a9 01       	movw	r20, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <GPIO_readPin+0x10e>
    1b4c:	55 95       	asr	r21
    1b4e:	47 95       	ror	r20
    1b50:	8a 95       	dec	r24
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <GPIO_readPin+0x10a>
    1b54:	ca 01       	movw	r24, r20
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	90 70       	andi	r25, 0x00	; 0
    1b5a:	88 23       	and	r24, r24
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	01 c0       	rjmp	.+2      	; 0x1b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b64:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <GPIO_setupPortDirection+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <GPIO_setupPortDirection+0x8>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	90 f5       	brcc	.+100    	; 0x1bf2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3c 83       	std	Y+4, r19	; 0x04
    1b96:	2b 83       	std	Y+3, r18	; 0x03
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	d1 f0       	breq	.+52     	; 0x1bd6 <GPIO_setupPortDirection+0x5e>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <GPIO_setupPortDirection+0x3e>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <GPIO_setupPortDirection+0x54>
    1bb4:	1e c0       	rjmp	.+60     	; 0x1bf2 <GPIO_setupPortDirection+0x7a>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	81 f0       	breq	.+32     	; 0x1be0 <GPIO_setupPortDirection+0x68>
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	81 f0       	breq	.+32     	; 0x1bea <GPIO_setupPortDirection+0x72>
    1bca:	13 c0       	rjmp	.+38     	; 0x1bf2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bcc:	ea e3       	ldi	r30, 0x3A	; 58
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	80 83       	st	Z, r24
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bd6:	e7 e3       	ldi	r30, 0x37	; 55
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	80 83       	st	Z, r24
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1be0:	e4 e3       	ldi	r30, 0x34	; 52
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	80 83       	st	Z, r24
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bea:	e1 e3       	ldi	r30, 0x31	; 49
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <GPIO_writePort+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <GPIO_writePort+0x8>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	84 30       	cpi	r24, 0x04	; 4
    1c14:	90 f5       	brcc	.+100    	; 0x1c7a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	3c 83       	std	Y+4, r19	; 0x04
    1c1e:	2b 83       	std	Y+3, r18	; 0x03
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	d1 f0       	breq	.+52     	; 0x1c5e <GPIO_writePort+0x5e>
    1c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <GPIO_writePort+0x3e>
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	61 f0       	breq	.+24     	; 0x1c54 <GPIO_writePort+0x54>
    1c3c:	1e c0       	rjmp	.+60     	; 0x1c7a <GPIO_writePort+0x7a>
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	3c 81       	ldd	r19, Y+4	; 0x04
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	81 f0       	breq	.+32     	; 0x1c68 <GPIO_writePort+0x68>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	91 05       	cpc	r25, r1
    1c50:	81 f0       	breq	.+32     	; 0x1c72 <GPIO_writePort+0x72>
    1c52:	13 c0       	rjmp	.+38     	; 0x1c7a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c54:	eb e3       	ldi	r30, 0x3B	; 59
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	80 83       	st	Z, r24
    1c5c:	0e c0       	rjmp	.+28     	; 0x1c7a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c5e:	e8 e3       	ldi	r30, 0x38	; 56
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	80 83       	st	Z, r24
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c68:	e5 e3       	ldi	r30, 0x35	; 53
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	80 83       	st	Z, r24
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c72:	e2 e3       	ldi	r30, 0x32	; 50
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <GPIO_readPort+0x6>
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <GPIO_readPort+0x8>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c96:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	84 30       	cpi	r24, 0x04	; 4
    1c9c:	90 f5       	brcc	.+100    	; 0x1d02 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	3c 83       	std	Y+4, r19	; 0x04
    1ca6:	2b 83       	std	Y+3, r18	; 0x03
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	91 05       	cpc	r25, r1
    1cb0:	d1 f0       	breq	.+52     	; 0x1ce6 <GPIO_readPort+0x5e>
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	22 30       	cpi	r18, 0x02	; 2
    1cb8:	31 05       	cpc	r19, r1
    1cba:	2c f4       	brge	.+10     	; 0x1cc6 <GPIO_readPort+0x3e>
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	61 f0       	breq	.+24     	; 0x1cdc <GPIO_readPort+0x54>
    1cc4:	1e c0       	rjmp	.+60     	; 0x1d02 <GPIO_readPort+0x7a>
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	22 30       	cpi	r18, 0x02	; 2
    1ccc:	31 05       	cpc	r19, r1
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <GPIO_readPort+0x68>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	83 30       	cpi	r24, 0x03	; 3
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	81 f0       	breq	.+32     	; 0x1cfa <GPIO_readPort+0x72>
    1cda:	13 c0       	rjmp	.+38     	; 0x1d02 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cdc:	e9 e3       	ldi	r30, 0x39	; 57
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	0e c0       	rjmp	.+28     	; 0x1d02 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ce6:	e6 e3       	ldi	r30, 0x36	; 54
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cf0:	e3 e3       	ldi	r30, 0x33	; 51
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1cfa:	e0 e3       	ldi	r30, 0x30	; 48
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <PWM_Timer0_Generate>:
#include "pwm.h"
#include "gpio.h" /* to use GPIO_setupPinDirection function*/

/* function responsible for generate pwm signal using timer0 with different duty cycles*/
void PWM_Timer0_Generate(uint8 duty_cycle)
{
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	0f 92       	push	r0
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
    1d22:	e2 e5       	ldi	r30, 0x52	; 82
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	10 82       	st	Z, r1

	if(duty_cycle <100)
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	84 36       	cpi	r24, 0x64	; 100
    1d2c:	c0 f4       	brcc	.+48     	; 0x1d5e <PWM_Timer0_Generate+0x4c>
		OCR0  = (uint8)( ((uint32)duty_cycle*256)/100 ); //Set Compare value
    1d2e:	0c e5       	ldi	r16, 0x5C	; 92
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a0 e0       	ldi	r26, 0x00	; 0
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ba 2f       	mov	r27, r26
    1d3e:	a9 2f       	mov	r26, r25
    1d40:	98 2f       	mov	r25, r24
    1d42:	88 27       	eor	r24, r24
    1d44:	24 e6       	ldi	r18, 0x64	; 100
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__udivmodsi4>
    1d54:	da 01       	movw	r26, r20
    1d56:	c9 01       	movw	r24, r18
    1d58:	f8 01       	movw	r30, r16
    1d5a:	80 83       	st	Z, r24
    1d5c:	07 c0       	rjmp	.+14     	; 0x1d6c <PWM_Timer0_Generate+0x5a>
	else if (duty_cycle ==100)
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	84 36       	cpi	r24, 0x64	; 100
    1d62:	21 f4       	brne	.+8      	; 0x1d6c <PWM_Timer0_Generate+0x5a>
		OCR0=255; /*to avoid the overflow (256 exceed the range of uint8)*/
    1d64:	ec e5       	ldi	r30, 0x5C	; 92
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	80 83       	st	Z, r24

	GPIO_setupPinDirection(pwm_PORT_ID,pwm_PIN_ID,PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	63 e0       	ldi	r22, 0x03	; 3
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 4b 0b 	call	0x1696	; 0x1696 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1d76:	e3 e5       	ldi	r30, 0x53	; 83
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	8a e6       	ldi	r24, 0x6A	; 106
    1d7c:	80 83       	st	Z, r24
}
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1db4:	80 91 8a 00 	lds	r24, 0x008A
    1db8:	90 91 8b 00 	lds	r25, 0x008B
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <__vector_7+0x40>
	{
		(*g_callBackPtr)();/* Call the Call Back function*/
    1dc0:	e0 91 8a 00 	lds	r30, 0x008A
    1dc4:	f0 91 8b 00 	lds	r31, 0x008B
    1dc8:	09 95       	icall
	}
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	7f 91       	pop	r23
    1ddc:	6f 91       	pop	r22
    1dde:	5f 91       	pop	r21
    1de0:	4f 91       	pop	r20
    1de2:	3f 91       	pop	r19
    1de4:	2f 91       	pop	r18
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	4f 93       	push	r20
    1e00:	5f 93       	push	r21
    1e02:	6f 93       	push	r22
    1e04:	7f 93       	push	r23
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	af 93       	push	r26
    1e0c:	bf 93       	push	r27
    1e0e:	ef 93       	push	r30
    1e10:	ff 93       	push	r31
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1e1a:	80 91 8a 00 	lds	r24, 0x008A
    1e1e:	90 91 8b 00 	lds	r25, 0x008B
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	29 f0       	breq	.+10     	; 0x1e30 <__vector_9+0x40>
	{
		(*g_callBackPtr)();/* Call the Call Back function*/
    1e26:	e0 91 8a 00 	lds	r30, 0x008A
    1e2a:	f0 91 8b 00 	lds	r31, 0x008B
    1e2e:	09 95       	icall
	}
}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	bf 91       	pop	r27
    1e3a:	af 91       	pop	r26
    1e3c:	9f 91       	pop	r25
    1e3e:	8f 91       	pop	r24
    1e40:	7f 91       	pop	r23
    1e42:	6f 91       	pop	r22
    1e44:	5f 91       	pop	r21
    1e46:	4f 91       	pop	r20
    1e48:	3f 91       	pop	r19
    1e4a:	2f 91       	pop	r18
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	0f 90       	pop	r0
    1e52:	1f 90       	pop	r1
    1e54:	18 95       	reti

00001e56 <Timer1_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <Timer1_init+0x6>
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
	/* set this bit for non-PWM mode and clear all the other bits*/
	TCCR1A = (1 << FOC1A);
    1e66:	ef e4       	ldi	r30, 0x4F	; 79
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	88 e0       	ldi	r24, 0x08	; 8
    1e6c:	80 83       	st	Z, r24

	/*insert the pre-scaler bits in CS12 CS11 CS10
	 *and insert bit mode in WGM12(0-->normal mode & 1-->compare mode with clearing WGM13 11 10)
	 *and clear all the other bits*/
	TCCR1B=(TCCR1B &0)|(Config_Ptr->prescaler |Config_Ptr->mode <<3);
    1e6e:	ee e4       	ldi	r30, 0x4E	; 78
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	ae e4       	ldi	r26, 0x4E	; 78
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	84 81       	ldd	r24, Z+4	; 0x04
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	e9 81       	ldd	r30, Y+1	; 0x01
    1e84:	fa 81       	ldd	r31, Y+2	; 0x02
    1e86:	85 81       	ldd	r24, Z+5	; 0x05
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	82 2b       	or	r24, r18
    1e9a:	93 2b       	or	r25, r19
    1e9c:	8c 93       	st	X, r24

	/*set the initial value*/
	TCNT1=Config_Ptr->initial_value;
    1e9e:	ac e4       	ldi	r26, 0x4C	; 76
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	11 96       	adiw	r26, 0x01	; 1
    1eac:	9c 93       	st	X, r25
    1eae:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==CompareMode)
    1eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb4:	85 81       	ldd	r24, Z+5	; 0x05
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	89 f4       	brne	.+34     	; 0x1edc <Timer1_init+0x86>
	{
		/*set the compare value*/
		OCR1A=Config_Ptr->compare_value;
    1eba:	aa e4       	ldi	r26, 0x4A	; 74
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	11 96       	adiw	r26, 0x01	; 1
    1ec8:	9c 93       	st	X, r25
    1eca:	8e 93       	st	-X, r24

		/*enable compare match interrupt*/
		SET_BIT(TIMSK,OCIE1A);
    1ecc:	a9 e5       	ldi	r26, 0x59	; 89
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e9 e5       	ldi	r30, 0x59	; 89
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 61       	ori	r24, 0x10	; 16
    1ed8:	8c 93       	st	X, r24
    1eda:	0c c0       	rjmp	.+24     	; 0x1ef4 <Timer1_init+0x9e>
	}
	else if(Config_Ptr->mode==Normalmode)
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	85 81       	ldd	r24, Z+5	; 0x05
    1ee2:	88 23       	and	r24, r24
    1ee4:	39 f4       	brne	.+14     	; 0x1ef4 <Timer1_init+0x9e>
	{
		/*enable overflow interrupt*/
		SET_BIT(TIMSK,TOIE1);
    1ee6:	a9 e5       	ldi	r26, 0x59	; 89
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e5       	ldi	r30, 0x59	; 89
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	84 60       	ori	r24, 0x04	; 4
    1ef2:	8c 93       	st	X, r24
	}

}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <Timer1_deInit>:

void Timer1_deInit(void)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1f08:	ef e4       	ldi	r30, 0x4F	; 79
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	10 82       	st	Z, r1
	TCCR1B = 0;
    1f0e:	ee e4       	ldi	r30, 0x4E	; 78
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	10 82       	st	Z, r1
	TCNT1 = 0;
    1f14:	ec e4       	ldi	r30, 0x4C	; 76
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	11 82       	std	Z+1, r1	; 0x01
    1f1a:	10 82       	st	Z, r1
	ICR1 = 0;
    1f1c:	e6 e4       	ldi	r30, 0x46	; 70
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	11 82       	std	Z+1, r1	; 0x01
    1f22:	10 82       	st	Z, r1
	TIMSK =0;
    1f24:	e9 e5       	ldi	r30, 0x59	; 89
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	10 82       	st	Z, r1

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1f2a:	10 92 8b 00 	sts	0x008B, r1
    1f2e:	10 92 8a 00 	sts	0x008A, r1
}
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <Timer1_setCallBack+0x6>
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	90 93 8b 00 	sts	0x008B, r25
    1f4e:	80 93 8a 00 	sts	0x008A, r24
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <TWI_init+0x6>
    1f62:	0f 92       	push	r0
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9b 83       	std	Y+3, r25	; 0x03
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
    /*  Calculate the TWBR register value */
	uint8 TWBR_value=(uint8)(F_CPU/(Config_Ptr->bit_rate*2))-8;
    1f6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f70:	81 81       	ldd	r24, Z+1	; 0x01
    1f72:	92 81       	ldd	r25, Z+2	; 0x02
    1f74:	a3 81       	ldd	r26, Z+3	; 0x03
    1f76:	b4 81       	ldd	r27, Z+4	; 0x04
    1f78:	9c 01       	movw	r18, r24
    1f7a:	ad 01       	movw	r20, r26
    1f7c:	22 0f       	add	r18, r18
    1f7e:	33 1f       	adc	r19, r19
    1f80:	44 1f       	adc	r20, r20
    1f82:	55 1f       	adc	r21, r21
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	92 e1       	ldi	r25, 0x12	; 18
    1f88:	aa e7       	ldi	r26, 0x7A	; 122
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__udivmodsi4>
    1f94:	da 01       	movw	r26, r20
    1f96:	c9 01       	movw	r24, r18
    1f98:	88 50       	subi	r24, 0x08	; 8
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    TWBR =TWBR_value;
    1f9c:	e0 e2       	ldi	r30, 0x20	; 32
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	80 83       	st	Z, r24

	TWSR = 0x00;/*choose zero pre-scaler*/
    1fa4:	e1 e2       	ldi	r30, 0x21	; 33
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	10 82       	st	Z, r1
	
    /*set the slave address and disable General Call Recognition by clear the 1st bit*/
    TWAR = (Config_Ptr->bit_rate)<<1;
    1faa:	22 e2       	ldi	r18, 0x22	; 34
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb2:	81 81       	ldd	r24, Z+1	; 0x01
    1fb4:	92 81       	ldd	r25, Z+2	; 0x02
    1fb6:	a3 81       	ldd	r26, Z+3	; 0x03
    1fb8:	b4 81       	ldd	r27, Z+4	; 0x04
    1fba:	88 0f       	add	r24, r24
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1fc0:	e6 e5       	ldi	r30, 0x56	; 86
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	84 e0       	ldi	r24, 0x04	; 4
    1fc6:	80 83       	st	Z, r24
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <TWI_start>:

void TWI_start(void)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1fdc:	e6 e5       	ldi	r30, 0x56	; 86
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	84 ea       	ldi	r24, 0xA4	; 164
    1fe2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fe4:	e6 e5       	ldi	r30, 0x56	; 86
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 23       	and	r24, r24
    1fec:	dc f7       	brge	.-10     	; 0x1fe4 <TWI_start+0x10>
}
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <TWI_stop>:

void TWI_stop(void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ffc:	e6 e5       	ldi	r30, 0x56	; 86
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	84 e9       	ldi	r24, 0x94	; 148
    2002:	80 83       	st	Z, r24
}
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2016:	e3 e2       	ldi	r30, 0x23	; 35
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    201e:	e6 e5       	ldi	r30, 0x56	; 86
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	84 e8       	ldi	r24, 0x84	; 132
    2024:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2026:	e6 e5       	ldi	r30, 0x56	; 86
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	88 23       	and	r24, r24
    202e:	dc f7       	brge	.-10     	; 0x2026 <TWI_writeByte+0x1c>
}
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2040:	e6 e5       	ldi	r30, 0x56	; 86
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	84 ec       	ldi	r24, 0xC4	; 196
    2046:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2048:	e6 e5       	ldi	r30, 0x56	; 86
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	88 23       	and	r24, r24
    2050:	dc f7       	brge	.-10     	; 0x2048 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2052:	e3 e2       	ldi	r30, 0x23	; 35
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2066:	e6 e5       	ldi	r30, 0x56	; 86
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	84 e8       	ldi	r24, 0x84	; 132
    206c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    206e:	e6 e5       	ldi	r30, 0x56	; 86
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	88 23       	and	r24, r24
    2076:	dc f7       	brge	.-10     	; 0x206e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2078:	e3 e2       	ldi	r30, 0x23	; 35
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
}
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	0f 92       	push	r0
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    208e:	e1 e2       	ldi	r30, 0x21	; 33
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	88 7f       	andi	r24, 0xF8	; 248
    2096:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2098:	89 81       	ldd	r24, Y+1	; 0x01
}
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <UART_init+0x6>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <UART_init+0x8>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    20b2:	1a 82       	std	Y+2, r1	; 0x02
    20b4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    20b6:	eb e2       	ldi	r30, 0x2B	; 43
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	80 83       	st	Z, r24

	/*enable the transmitter and the reciever */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    20be:	aa e2       	ldi	r26, 0x2A	; 42
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	ea e2       	ldi	r30, 0x2A	; 42
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	88 61       	ori	r24, 0x18	; 24
    20ca:	8c 93       	st	X, r24

	/*insert the character size bit in UCSZ2 */
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data &0x04);
    20cc:	aa e2       	ldi	r26, 0x2A	; 42
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ea e2       	ldi	r30, 0x2A	; 42
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	98 2f       	mov	r25, r24
    20d8:	9b 7f       	andi	r25, 0xFB	; 251
    20da:	eb 81       	ldd	r30, Y+3	; 0x03
    20dc:	fc 81       	ldd	r31, Y+4	; 0x04
    20de:	80 81       	ld	r24, Z
    20e0:	84 70       	andi	r24, 0x04	; 4
    20e2:	89 2b       	or	r24, r25
    20e4:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    20e6:	a0 e4       	ldi	r26, 0x40	; 64
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e0 e4       	ldi	r30, 0x40	; 64
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	80 68       	ori	r24, 0x80	; 128
    20f2:	8c 93       	st	X, r24

	/*insert the character size bits in UCSZ1 and UCSZ0*/
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data &0x03)<<1);
    20f4:	a0 e4       	ldi	r26, 0x40	; 64
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e0 e4       	ldi	r30, 0x40	; 64
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	28 2f       	mov	r18, r24
    2100:	29 7f       	andi	r18, 0xF9	; 249
    2102:	eb 81       	ldd	r30, Y+3	; 0x03
    2104:	fc 81       	ldd	r31, Y+4	; 0x04
    2106:	80 81       	ld	r24, Z
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	83 70       	andi	r24, 0x03	; 3
    210e:	90 70       	andi	r25, 0x00	; 0
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	82 2b       	or	r24, r18
    2116:	8c 93       	st	X, r24

	/*insert the parity mode bits in UPM1 and UPM0*/
	UCSRC=(UCSRC&0xCF)|(Config_Ptr->parity <<4);
    2118:	a0 e4       	ldi	r26, 0x40	; 64
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e0 e4       	ldi	r30, 0x40	; 64
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	2f 7c       	andi	r18, 0xCF	; 207
    2126:	eb 81       	ldd	r30, Y+3	; 0x03
    2128:	fc 81       	ldd	r31, Y+4	; 0x04
    212a:	81 81       	ldd	r24, Z+1	; 0x01
    212c:	88 2f       	mov	r24, r24
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	82 95       	swap	r24
    2132:	92 95       	swap	r25
    2134:	90 7f       	andi	r25, 0xF0	; 240
    2136:	98 27       	eor	r25, r24
    2138:	80 7f       	andi	r24, 0xF0	; 240
    213a:	98 27       	eor	r25, r24
    213c:	82 2b       	or	r24, r18
    213e:	8c 93       	st	X, r24

	/*insert number of stop bits in USBS*/
	UCSRC=(UCSRC&0xF7)|(Config_Ptr->stop_bit <<3);
    2140:	a0 e4       	ldi	r26, 0x40	; 64
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e0 e4       	ldi	r30, 0x40	; 64
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	28 2f       	mov	r18, r24
    214c:	27 7f       	andi	r18, 0xF7	; 247
    214e:	eb 81       	ldd	r30, Y+3	; 0x03
    2150:	fc 81       	ldd	r31, Y+4	; 0x04
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	82 2b       	or	r24, r18
    2166:	8c 93       	st	X, r24
	
	if(Config_Ptr->bit_data ==Nine_Bits)
    2168:	eb 81       	ldd	r30, Y+3	; 0x03
    216a:	fc 81       	ldd	r31, Y+4	; 0x04
    216c:	80 81       	ld	r24, Z
    216e:	87 30       	cpi	r24, 0x07	; 7
    2170:	39 f4       	brne	.+14     	; 0x2180 <UART_init+0xde>
	{
		/*Enable reception and transmission of 9-bit serial data*/
		UCSRB |= (1<<RXB8)|(1<<TXB8);
    2172:	aa e2       	ldi	r26, 0x2A	; 42
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ea e2       	ldi	r30, 0x2A	; 42
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	83 60       	ori	r24, 0x03	; 3
    217e:	8c 93       	st	X, r24
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->UART_BaudRate * 8UL))) - 1);
    2180:	eb 81       	ldd	r30, Y+3	; 0x03
    2182:	fc 81       	ldd	r31, Y+4	; 0x04
    2184:	83 81       	ldd	r24, Z+3	; 0x03
    2186:	94 81       	ldd	r25, Z+4	; 0x04
    2188:	a5 81       	ldd	r26, Z+5	; 0x05
    218a:	b6 81       	ldd	r27, Z+6	; 0x06
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	aa 1f       	adc	r26, r26
    2192:	bb 1f       	adc	r27, r27
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	aa 1f       	adc	r26, r26
    219a:	bb 1f       	adc	r27, r27
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	aa 1f       	adc	r26, r26
    21a2:	bb 1f       	adc	r27, r27
    21a4:	9c 01       	movw	r18, r24
    21a6:	ad 01       	movw	r20, r26
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	92 e1       	ldi	r25, 0x12	; 18
    21ac:	aa e7       	ldi	r26, 0x7A	; 122
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__udivmodsi4>
    21b8:	da 01       	movw	r26, r20
    21ba:	c9 01       	movw	r24, r18
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9a 83       	std	Y+2, r25	; 0x02
    21c0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    21c2:	e0 e4       	ldi	r30, 0x40	; 64
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	89 2f       	mov	r24, r25
    21cc:	99 27       	eor	r25, r25
    21ce:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    21d0:	e9 e2       	ldi	r30, 0x29	; 41
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	80 83       	st	Z, r24
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21f2:	eb e2       	ldi	r30, 0x2B	; 43
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	80 72       	andi	r24, 0x20	; 32
    21fe:	90 70       	andi	r25, 0x00	; 0
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	b9 f3       	breq	.-18     	; 0x21f2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2204:	ec e2       	ldi	r30, 0x2C	; 44
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    221c:	eb e2       	ldi	r30, 0x2B	; 43
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	88 23       	and	r24, r24
    2224:	dc f7       	brge	.-10     	; 0x221c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2226:	ec e2       	ldi	r30, 0x2C	; 44
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <UART_sendString+0x6>
    2238:	0f 92       	push	r0
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	9b 83       	std	Y+3, r25	; 0x03
    2240:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2242:	19 82       	std	Y+1, r1	; 0x01
    2244:	0e c0       	rjmp	.+28     	; 0x2262 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	9b 81       	ldd	r25, Y+3	; 0x03
    2250:	fc 01       	movw	r30, r24
    2252:	e2 0f       	add	r30, r18
    2254:	f3 1f       	adc	r31, r19
    2256:	80 81       	ld	r24, Z
    2258:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_sendByte>
		i++;
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	fc 01       	movw	r30, r24
    226e:	e2 0f       	add	r30, r18
    2270:	f3 1f       	adc	r31, r19
    2272:	80 81       	ld	r24, Z
    2274:	88 23       	and	r24, r24
    2276:	39 f7       	brne	.-50     	; 0x2246 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <UART_sendArray>:
void UART_sendArray(const uint8*arr,uint8 size)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <UART_sendArray+0x6>
    228a:	00 d0       	rcall	.+0      	; 0x228c <UART_sendArray+0x8>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	9b 83       	std	Y+3, r25	; 0x03
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    2296:	19 82       	std	Y+1, r1	; 0x01
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <UART_sendArray+0x32>
	{
		UART_sendByte(arr[i]);
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	9b 81       	ldd	r25, Y+3	; 0x03
    22a4:	fc 01       	movw	r30, r24
    22a6:	e2 0f       	add	r30, r18
    22a8:	f3 1f       	adc	r31, r19
    22aa:	80 81       	ld	r24, Z
    22ac:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_sendByte>
	*******************************************************************/
}
void UART_sendArray(const uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	99 81       	ldd	r25, Y+1	; 0x01
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	98 17       	cp	r25, r24
    22bc:	70 f3       	brcs	.-36     	; 0x229a <UART_sendArray+0x16>
	{
		UART_sendByte(arr[i]);
	}
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <UART_receiveString+0xa>
    22d6:	0f 92       	push	r0
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	9b 83       	std	Y+3, r25	; 0x03
    22de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22e0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	8c 01       	movw	r16, r24
    22ee:	02 0f       	add	r16, r18
    22f0:	13 1f       	adc	r17, r19
    22f2:	0e 94 0a 11 	call	0x2214	; 0x2214 <UART_recieveByte>
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 83       	st	Z, r24
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	8c 01       	movw	r16, r24
    230e:	02 0f       	add	r16, r18
    2310:	13 1f       	adc	r17, r19
    2312:	0e 94 0a 11 	call	0x2214	; 0x2214 <UART_recieveByte>
    2316:	f8 01       	movw	r30, r16
    2318:	80 83       	st	Z, r24

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	fc 01       	movw	r30, r24
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	80 81       	ld	r24, Z
    232c:	83 32       	cpi	r24, 0x23	; 35
    232e:	31 f7       	brne	.-52     	; 0x22fc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	10 82       	st	Z, r1
}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <UART_receiveArray>:
void UART_receiveArray(uint8*arr,uint8 size)
{
    2352:	0f 93       	push	r16
    2354:	1f 93       	push	r17
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <UART_receiveArray+0xa>
    235c:	00 d0       	rcall	.+0      	; 0x235e <UART_receiveArray+0xc>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	9b 83       	std	Y+3, r25	; 0x03
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    2368:	19 82       	std	Y+1, r1	; 0x01
    236a:	0f c0       	rjmp	.+30     	; 0x238a <UART_receiveArray+0x38>
	{
		arr[i]=UART_recieveByte();
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	8c 01       	movw	r16, r24
    2378:	02 0f       	add	r16, r18
    237a:	13 1f       	adc	r17, r19
    237c:	0e 94 0a 11 	call	0x2214	; 0x2214 <UART_recieveByte>
    2380:	f8 01       	movw	r30, r16
    2382:	80 83       	st	Z, r24
	Str[i] = '\0';
}
void UART_receiveArray(uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	8f 5f       	subi	r24, 0xFF	; 255
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	99 81       	ldd	r25, Y+1	; 0x01
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	98 17       	cp	r25, r24
    2390:	68 f3       	brcs	.-38     	; 0x236c <UART_receiveArray+0x1a>
	{
		arr[i]=UART_recieveByte();
	}

}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	08 95       	ret

000023a4 <__udivmodsi4>:
    23a4:	a1 e2       	ldi	r26, 0x21	; 33
    23a6:	1a 2e       	mov	r1, r26
    23a8:	aa 1b       	sub	r26, r26
    23aa:	bb 1b       	sub	r27, r27
    23ac:	fd 01       	movw	r30, r26
    23ae:	0d c0       	rjmp	.+26     	; 0x23ca <__udivmodsi4_ep>

000023b0 <__udivmodsi4_loop>:
    23b0:	aa 1f       	adc	r26, r26
    23b2:	bb 1f       	adc	r27, r27
    23b4:	ee 1f       	adc	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	a2 17       	cp	r26, r18
    23ba:	b3 07       	cpc	r27, r19
    23bc:	e4 07       	cpc	r30, r20
    23be:	f5 07       	cpc	r31, r21
    23c0:	20 f0       	brcs	.+8      	; 0x23ca <__udivmodsi4_ep>
    23c2:	a2 1b       	sub	r26, r18
    23c4:	b3 0b       	sbc	r27, r19
    23c6:	e4 0b       	sbc	r30, r20
    23c8:	f5 0b       	sbc	r31, r21

000023ca <__udivmodsi4_ep>:
    23ca:	66 1f       	adc	r22, r22
    23cc:	77 1f       	adc	r23, r23
    23ce:	88 1f       	adc	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	1a 94       	dec	r1
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <__udivmodsi4_loop>
    23d6:	60 95       	com	r22
    23d8:	70 95       	com	r23
    23da:	80 95       	com	r24
    23dc:	90 95       	com	r25
    23de:	9b 01       	movw	r18, r22
    23e0:	ac 01       	movw	r20, r24
    23e2:	bd 01       	movw	r22, r26
    23e4:	cf 01       	movw	r24, r30
    23e6:	08 95       	ret

000023e8 <__prologue_saves__>:
    23e8:	2f 92       	push	r2
    23ea:	3f 92       	push	r3
    23ec:	4f 92       	push	r4
    23ee:	5f 92       	push	r5
    23f0:	6f 92       	push	r6
    23f2:	7f 92       	push	r7
    23f4:	8f 92       	push	r8
    23f6:	9f 92       	push	r9
    23f8:	af 92       	push	r10
    23fa:	bf 92       	push	r11
    23fc:	cf 92       	push	r12
    23fe:	df 92       	push	r13
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	ca 1b       	sub	r28, r26
    2412:	db 0b       	sbc	r29, r27
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	09 94       	ijmp

00002420 <__epilogue_restores__>:
    2420:	2a 88       	ldd	r2, Y+18	; 0x12
    2422:	39 88       	ldd	r3, Y+17	; 0x11
    2424:	48 88       	ldd	r4, Y+16	; 0x10
    2426:	5f 84       	ldd	r5, Y+15	; 0x0f
    2428:	6e 84       	ldd	r6, Y+14	; 0x0e
    242a:	7d 84       	ldd	r7, Y+13	; 0x0d
    242c:	8c 84       	ldd	r8, Y+12	; 0x0c
    242e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2430:	aa 84       	ldd	r10, Y+10	; 0x0a
    2432:	b9 84       	ldd	r11, Y+9	; 0x09
    2434:	c8 84       	ldd	r12, Y+8	; 0x08
    2436:	df 80       	ldd	r13, Y+7	; 0x07
    2438:	ee 80       	ldd	r14, Y+6	; 0x06
    243a:	fd 80       	ldd	r15, Y+5	; 0x05
    243c:	0c 81       	ldd	r16, Y+4	; 0x04
    243e:	1b 81       	ldd	r17, Y+3	; 0x03
    2440:	aa 81       	ldd	r26, Y+2	; 0x02
    2442:	b9 81       	ldd	r27, Y+1	; 0x01
    2444:	ce 0f       	add	r28, r30
    2446:	d1 1d       	adc	r29, r1
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	ed 01       	movw	r28, r26
    2454:	08 95       	ret

00002456 <_exit>:
    2456:	f8 94       	cli

00002458 <__stop_program>:
    2458:	ff cf       	rjmp	.-2      	; 0x2458 <__stop_program>
