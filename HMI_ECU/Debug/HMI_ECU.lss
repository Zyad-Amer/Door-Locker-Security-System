
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000326e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000326e  00003302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800178  00800178  0000341a  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001343  00000000  00000000  000064c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007807  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007947  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b785  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 0b 	call	0x1614	; 0x1614 <main>
      8a:	0c 94 35 19 	jmp	0x326a	; 0x326a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e5       	ldi	r26, 0x5D	; 93
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e5       	ldi	r24, 0x5D	; 93
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <getPassword>:
uint8 g_wrong_entry_counter=0;

/*function to get the password from the user and store it in an array
 * and display * for each number then go to infinite loop until press = */
void getPassword(uint8 *pass,uint8 size,uint8 firstPlace)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a2 97       	sbiw	r28, 0x22	; 34
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	98 a3       	std	Y+32, r25	; 0x20
     b5c:	8f 8f       	std	Y+31, r24	; 0x1f
     b5e:	69 a3       	std	Y+33, r22	; 0x21
     b60:	4a a3       	std	Y+34, r20	; 0x22
	uint8 i,key;
	for(i=0;i<size;i++)
     b62:	1e 8e       	std	Y+30, r1	; 0x1e
     b64:	1e c1       	rjmp	.+572    	; 0xda2 <getPassword+0x25c>
	{
		key=KEYPAD_getPressedKey();
     b66:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
     b6a:	8d 8f       	std	Y+29, r24	; 0x1d
		if(key <10 )/*if the user enters any number from 0 to 9 store it in pass array*/
     b6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b6e:	8a 30       	cpi	r24, 0x0A	; 10
     b70:	08 f0       	brcs	.+2      	; 0xb74 <getPassword+0x2e>
     b72:	87 c0       	rjmp	.+270    	; 0xc82 <getPassword+0x13c>
		{
			pass[i]=key;
     b74:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b7c:	98 a1       	ldd	r25, Y+32	; 0x20
     b7e:	fc 01       	movw	r30, r24
     b80:	e2 0f       	add	r30, r18
     b82:	f3 1f       	adc	r31, r19
     b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b86:	80 83       	st	Z, r24
			LCD_moveCursor(1,firstPlace+i);
     b88:	9a a1       	ldd	r25, Y+34	; 0x22
     b8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b8c:	98 0f       	add	r25, r24
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	69 2f       	mov	r22, r25
     b92:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_moveCursor>
			LCD_displayCharacter('*');
     b96:	8a e2       	ldi	r24, 0x2A	; 42
     b98:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayCharacter>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a0 ea       	ldi	r26, 0xA0	; 160
     ba2:	b1 e4       	ldi	r27, 0x41	; 65
     ba4:	89 8f       	std	Y+25, r24	; 0x19
     ba6:	9a 8f       	std	Y+26, r25	; 0x1a
     ba8:	ab 8f       	std	Y+27, r26	; 0x1b
     baa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bac:	69 8d       	ldd	r22, Y+25	; 0x19
     bae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	4a ef       	ldi	r20, 0xFA	; 250
     bba:	54 e4       	ldi	r21, 0x44	; 68
     bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	8d 8b       	std	Y+21, r24	; 0x15
     bc6:	9e 8b       	std	Y+22, r25	; 0x16
     bc8:	af 8b       	std	Y+23, r26	; 0x17
     bca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bcc:	6d 89       	ldd	r22, Y+21	; 0x15
     bce:	7e 89       	ldd	r23, Y+22	; 0x16
     bd0:	8f 89       	ldd	r24, Y+23	; 0x17
     bd2:	98 8d       	ldd	r25, Y+24	; 0x18
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e8       	ldi	r20, 0x80	; 128
     bda:	5f e3       	ldi	r21, 0x3F	; 63
     bdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be0:	88 23       	and	r24, r24
     be2:	2c f4       	brge	.+10     	; 0xbee <getPassword+0xa8>
		__ticks = 1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9c 8b       	std	Y+20, r25	; 0x14
     bea:	8b 8b       	std	Y+19, r24	; 0x13
     bec:	3f c0       	rjmp	.+126    	; 0xc6c <getPassword+0x126>
	else if (__tmp > 65535)
     bee:	6d 89       	ldd	r22, Y+21	; 0x15
     bf0:	7e 89       	ldd	r23, Y+22	; 0x16
     bf2:	8f 89       	ldd	r24, Y+23	; 0x17
     bf4:	98 8d       	ldd	r25, Y+24	; 0x18
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	4f e7       	ldi	r20, 0x7F	; 127
     bfc:	57 e4       	ldi	r21, 0x47	; 71
     bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c02:	18 16       	cp	r1, r24
     c04:	4c f5       	brge	.+82     	; 0xc58 <getPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c06:	69 8d       	ldd	r22, Y+25	; 0x19
     c08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e2       	ldi	r20, 0x20	; 32
     c14:	51 e4       	ldi	r21, 0x41	; 65
     c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	bc 01       	movw	r22, r24
     c20:	cd 01       	movw	r24, r26
     c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9c 8b       	std	Y+20, r25	; 0x14
     c2c:	8b 8b       	std	Y+19, r24	; 0x13
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <getPassword+0x108>
     c30:	88 ec       	ldi	r24, 0xC8	; 200
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	9a 8b       	std	Y+18, r25	; 0x12
     c36:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c38:	89 89       	ldd	r24, Y+17	; 0x11
     c3a:	9a 89       	ldd	r25, Y+18	; 0x12
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <getPassword+0xf6>
     c40:	9a 8b       	std	Y+18, r25	; 0x12
     c42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c44:	8b 89       	ldd	r24, Y+19	; 0x13
     c46:	9c 89       	ldd	r25, Y+20	; 0x14
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	9c 8b       	std	Y+20, r25	; 0x14
     c4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4e:	8b 89       	ldd	r24, Y+19	; 0x13
     c50:	9c 89       	ldd	r25, Y+20	; 0x14
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	69 f7       	brne	.-38     	; 0xc30 <getPassword+0xea>
     c56:	a2 c0       	rjmp	.+324    	; 0xd9c <getPassword+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c58:	6d 89       	ldd	r22, Y+21	; 0x15
     c5a:	7e 89       	ldd	r23, Y+22	; 0x16
     c5c:	8f 89       	ldd	r24, Y+23	; 0x17
     c5e:	98 8d       	ldd	r25, Y+24	; 0x18
     c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	9c 8b       	std	Y+20, r25	; 0x14
     c6a:	8b 8b       	std	Y+19, r24	; 0x13
     c6c:	8b 89       	ldd	r24, Y+19	; 0x13
     c6e:	9c 89       	ldd	r25, Y+20	; 0x14
     c70:	98 8b       	std	Y+16, r25	; 0x10
     c72:	8f 87       	std	Y+15, r24	; 0x0f
     c74:	8f 85       	ldd	r24, Y+15	; 0x0f
     c76:	98 89       	ldd	r25, Y+16	; 0x10
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <getPassword+0x132>
     c7c:	98 8b       	std	Y+16, r25	; 0x10
     c7e:	8f 87       	std	Y+15, r24	; 0x0f
     c80:	8d c0       	rjmp	.+282    	; 0xd9c <getPassword+0x256>
			_delay_ms(20);
		}
		else if(key ==13)/*handling the delete button */
     c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c84:	8d 30       	cpi	r24, 0x0D	; 13
     c86:	09 f0       	breq	.+2      	; 0xc8a <getPassword+0x144>
     c88:	86 c0       	rjmp	.+268    	; 0xd96 <getPassword+0x250>
		{
			i--;
     c8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c8c:	81 50       	subi	r24, 0x01	; 1
     c8e:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_moveCursor(1,firstPlace+i);
     c90:	9a a1       	ldd	r25, Y+34	; 0x22
     c92:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c94:	98 0f       	add	r25, r24
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	69 2f       	mov	r22, r25
     c9a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_moveCursor>
			LCD_displayCharacter(' ');
     c9e:	80 e2       	ldi	r24, 0x20	; 32
     ca0:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayCharacter>
			i--;
     ca4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	8e 8f       	std	Y+30, r24	; 0x1e
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	a0 ea       	ldi	r26, 0xA0	; 160
     cb0:	b1 e4       	ldi	r27, 0x41	; 65
     cb2:	8b 87       	std	Y+11, r24	; 0x0b
     cb4:	9c 87       	std	Y+12, r25	; 0x0c
     cb6:	ad 87       	std	Y+13, r26	; 0x0d
     cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cba:	6b 85       	ldd	r22, Y+11	; 0x0b
     cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	4a ef       	ldi	r20, 0xFA	; 250
     cc8:	54 e4       	ldi	r21, 0x44	; 68
     cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	8f 83       	std	Y+7, r24	; 0x07
     cd4:	98 87       	std	Y+8, r25	; 0x08
     cd6:	a9 87       	std	Y+9, r26	; 0x09
     cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cda:	6f 81       	ldd	r22, Y+7	; 0x07
     cdc:	78 85       	ldd	r23, Y+8	; 0x08
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	5f e3       	ldi	r21, 0x3F	; 63
     cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cee:	88 23       	and	r24, r24
     cf0:	2c f4       	brge	.+10     	; 0xcfc <getPassword+0x1b6>
		__ticks = 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	8d 83       	std	Y+5, r24	; 0x05
     cfa:	3f c0       	rjmp	.+126    	; 0xd7a <getPassword+0x234>
	else if (__tmp > 65535)
     cfc:	6f 81       	ldd	r22, Y+7	; 0x07
     cfe:	78 85       	ldd	r23, Y+8	; 0x08
     d00:	89 85       	ldd	r24, Y+9	; 0x09
     d02:	9a 85       	ldd	r25, Y+10	; 0x0a
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	3f ef       	ldi	r19, 0xFF	; 255
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	57 e4       	ldi	r21, 0x47	; 71
     d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d10:	18 16       	cp	r1, r24
     d12:	4c f5       	brge	.+82     	; 0xd66 <getPassword+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d14:	6b 85       	ldd	r22, Y+11	; 0x0b
     d16:	7c 85       	ldd	r23, Y+12	; 0x0c
     d18:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e2       	ldi	r20, 0x20	; 32
     d22:	51 e4       	ldi	r21, 0x41	; 65
     d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	bc 01       	movw	r22, r24
     d2e:	cd 01       	movw	r24, r26
     d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9e 83       	std	Y+6, r25	; 0x06
     d3a:	8d 83       	std	Y+5, r24	; 0x05
     d3c:	0f c0       	rjmp	.+30     	; 0xd5c <getPassword+0x216>
     d3e:	88 ec       	ldi	r24, 0xC8	; 200
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9c 83       	std	Y+4, r25	; 0x04
     d44:	8b 83       	std	Y+3, r24	; 0x03
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <getPassword+0x204>
     d4e:	9c 83       	std	Y+4, r25	; 0x04
     d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	69 f7       	brne	.-38     	; 0xd3e <getPassword+0x1f8>
     d64:	1b c0       	rjmp	.+54     	; 0xd9c <getPassword+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d66:	6f 81       	ldd	r22, Y+7	; 0x07
     d68:	78 85       	ldd	r23, Y+8	; 0x08
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	9e 83       	std	Y+6, r25	; 0x06
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <getPassword+0x240>
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <getPassword+0x256>
			_delay_ms(20);
		}
		else/*if the user enters any other button*/
		{
			while(key >10){key=KEYPAD_getPressedKey();}
     d90:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
     d94:	8d 8f       	std	Y+29, r24	; 0x1d
     d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d98:	8b 30       	cpi	r24, 0x0B	; 11
     d9a:	d0 f7       	brcc	.-12     	; 0xd90 <getPassword+0x24a>
/*function to get the password from the user and store it in an array
 * and display * for each number then go to infinite loop until press = */
void getPassword(uint8 *pass,uint8 size,uint8 firstPlace)
{
	uint8 i,key;
	for(i=0;i<size;i++)
     d9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	8e 8f       	std	Y+30, r24	; 0x1e
     da2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     da4:	89 a1       	ldd	r24, Y+33	; 0x21
     da6:	98 17       	cp	r25, r24
     da8:	08 f4       	brcc	.+2      	; 0xdac <getPassword+0x266>
     daa:	dd ce       	rjmp	.-582    	; 0xb66 <getPassword+0x20>
		{
			while(key >10){key=KEYPAD_getPressedKey();}
		}
	}
	/*wait for pressing =(enter) */
	while(KEYPAD_getPressedKey() !=EQUALBUTTON){}
     dac:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
     db0:	8d 33       	cpi	r24, 0x3D	; 61
     db2:	e1 f7       	brne	.-8      	; 0xdac <getPassword+0x266>
}
     db4:	a2 96       	adiw	r28, 0x22	; 34
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <timer1_1min_callback>:

void timer1_1min_callback(void)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     dce:	80 91 78 01 	lds	r24, 0x0178
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 93 78 01 	sts	0x0178, r24
	if(g_tick==4)
     dd8:	80 91 78 01 	lds	r24, 0x0178
     ddc:	84 30       	cpi	r24, 0x04	; 4
     dde:	29 f4       	brne	.+10     	; 0xdea <timer1_1min_callback+0x24>
	{
		g_time_1min=1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 79 01 	sts	0x0179, r24
		g_tick=0;
     de6:	10 92 78 01 	sts	0x0178, r1
	}
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <timer1_15sec_callback>:

void timer1_15sec_callback(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	g_time_15sec=1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 7a 01 	sts	0x017A, r24
}
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <calc_1min>:

void calc_1min(void)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	2b 97       	sbiw	r28, 0x0b	; 11
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType Timer1_1min_Configuration={0,11111,F_CPU_1024,CompareMode};
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	98 87       	std	Y+8, r25	; 0x08
     e1e:	8f 83       	std	Y+7, r24	; 0x07
     e20:	e5 e6       	ldi	r30, 0x65	; 101
     e22:	f1 e0       	ldi	r31, 0x01	; 1
     e24:	fa 87       	std	Y+10, r31	; 0x0a
     e26:	e9 87       	std	Y+9, r30	; 0x09
     e28:	f6 e0       	ldi	r31, 0x06	; 6
     e2a:	fb 87       	std	Y+11, r31	; 0x0b
     e2c:	e9 85       	ldd	r30, Y+9	; 0x09
     e2e:	fa 85       	ldd	r31, Y+10	; 0x0a
     e30:	00 80       	ld	r0, Z
     e32:	89 85       	ldd	r24, Y+9	; 0x09
     e34:	9a 85       	ldd	r25, Y+10	; 0x0a
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	9a 87       	std	Y+10, r25	; 0x0a
     e3a:	89 87       	std	Y+9, r24	; 0x09
     e3c:	ef 81       	ldd	r30, Y+7	; 0x07
     e3e:	f8 85       	ldd	r31, Y+8	; 0x08
     e40:	00 82       	st	Z, r0
     e42:	8f 81       	ldd	r24, Y+7	; 0x07
     e44:	98 85       	ldd	r25, Y+8	; 0x08
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	98 87       	std	Y+8, r25	; 0x08
     e4a:	8f 83       	std	Y+7, r24	; 0x07
     e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4e:	91 50       	subi	r25, 0x01	; 1
     e50:	9b 87       	std	Y+11, r25	; 0x0b
     e52:	eb 85       	ldd	r30, Y+11	; 0x0b
     e54:	ee 23       	and	r30, r30
     e56:	51 f7       	brne	.-44     	; 0xe2c <calc_1min+0x28>
	Timer1_init(&Timer1_1min_Configuration);
     e58:	ce 01       	movw	r24, r28
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Timer1_init>
	Timer1_setCallBack(&timer1_1min_callback);
     e60:	83 ee       	ldi	r24, 0xE3	; 227
     e62:	96 e0       	ldi	r25, 0x06	; 6
     e64:	0e 94 04 17 	call	0x2e08	; 0x2e08 <Timer1_setCallBack>

	while(g_time_1min != 1){}
     e68:	80 91 79 01 	lds	r24, 0x0179
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <calc_1min+0x64>

	g_time_1min=0;
     e70:	10 92 79 01 	sts	0x0179, r1
}
     e74:	2b 96       	adiw	r28, 0x0b	; 11
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <calc_15sec>:
void calc_15sec(void)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	2b 97       	sbiw	r28, 0x0b	; 11
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType Timer1_15sec_Configuration={0,11111,F_CPU_1024,CompareMode};
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	98 87       	std	Y+8, r25	; 0x08
     ea0:	8f 83       	std	Y+7, r24	; 0x07
     ea2:	eb e6       	ldi	r30, 0x6B	; 107
     ea4:	f1 e0       	ldi	r31, 0x01	; 1
     ea6:	fa 87       	std	Y+10, r31	; 0x0a
     ea8:	e9 87       	std	Y+9, r30	; 0x09
     eaa:	f6 e0       	ldi	r31, 0x06	; 6
     eac:	fb 87       	std	Y+11, r31	; 0x0b
     eae:	e9 85       	ldd	r30, Y+9	; 0x09
     eb0:	fa 85       	ldd	r31, Y+10	; 0x0a
     eb2:	00 80       	ld	r0, Z
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	9a 87       	std	Y+10, r25	; 0x0a
     ebc:	89 87       	std	Y+9, r24	; 0x09
     ebe:	ef 81       	ldd	r30, Y+7	; 0x07
     ec0:	f8 85       	ldd	r31, Y+8	; 0x08
     ec2:	00 82       	st	Z, r0
     ec4:	8f 81       	ldd	r24, Y+7	; 0x07
     ec6:	98 85       	ldd	r25, Y+8	; 0x08
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	98 87       	std	Y+8, r25	; 0x08
     ecc:	8f 83       	std	Y+7, r24	; 0x07
     ece:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed0:	91 50       	subi	r25, 0x01	; 1
     ed2:	9b 87       	std	Y+11, r25	; 0x0b
     ed4:	eb 85       	ldd	r30, Y+11	; 0x0b
     ed6:	ee 23       	and	r30, r30
     ed8:	51 f7       	brne	.-44     	; 0xeae <calc_15sec+0x28>
	Timer1_init(&Timer1_15sec_Configuration);
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Timer1_init>
	Timer1_setCallBack(&timer1_15sec_callback);
     ee2:	88 ef       	ldi	r24, 0xF8	; 248
     ee4:	96 e0       	ldi	r25, 0x06	; 6
     ee6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <Timer1_setCallBack>

	while(g_time_15sec != 1){}
     eea:	80 91 7a 01 	lds	r24, 0x017A
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	e1 f7       	brne	.-8      	; 0xeea <calc_15sec+0x64>

	g_time_15sec=0;
     ef2:	10 92 7a 01 	sts	0x017A, r1
}
     ef6:	2b 96       	adiw	r28, 0x0b	; 11
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <wait_and_sendArray>:

void wait_and_sendArray(uint8 *arr,uint8 size)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <wait_and_sendArray+0x6>
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	6b 83       	std	Y+3, r22	; 0x03
	/*Send readiness signal to Control_ECU*/
	UART_sendByte(HMI_ECU_IS_READY);
     f1a:	8c ef       	ldi	r24, 0xFC	; 252
     f1c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <UART_sendByte>
	/* Wait until the Control_ECU is ready to receive the array */
	while(UART_recieveByte() != CONTROL_ECU_IS_READY){}
     f20:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <UART_recieveByte>
     f24:	8b 3f       	cpi	r24, 0xFB	; 251
     f26:	e1 f7       	brne	.-8      	; 0xf20 <wait_and_sendArray+0x18>
	/* Send the array to Control_ECU through UART */
	UART_sendArray(arr,size);
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	6b 81       	ldd	r22, Y+3	; 0x03
     f2e:	0e 94 07 18 	call	0x300e	; 0x300e <UART_sendArray>
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <wait_and_sendByte>:

void wait_and_sendByte(uint8 DataByte)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	89 83       	std	Y+1, r24	; 0x01
	/*Send readiness signal to Control_ECU*/
	UART_sendByte(HMI_ECU_IS_READY);
     f4a:	8c ef       	ldi	r24, 0xFC	; 252
     f4c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <UART_sendByte>
	/* Wait until the Control_ECU is ready to receive the data */
	while(UART_recieveByte() != CONTROL_ECU_IS_READY){}
     f50:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <UART_recieveByte>
     f54:	8b 3f       	cpi	r24, 0xFB	; 251
     f56:	e1 f7       	brne	.-8      	; 0xf50 <wait_and_sendByte+0x12>
	/* Send the required byte to the Control_ECU*/
	UART_sendByte(DataByte);
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <UART_sendByte>
}
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <wait_and_receiveByte>:

uint8 wait_and_receiveByte(void)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
    /* Wait for readiness signal from Control_ECU*/
    while (UART_recieveByte() != CONTROL_ECU_IS_READY) {}
     f6e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <UART_recieveByte>
     f72:	8b 3f       	cpi	r24, 0xFB	; 251
     f74:	e1 f7       	brne	.-8      	; 0xf6e <wait_and_receiveByte+0x8>
    /*Send readiness signal to Control_ECU*/
    UART_sendByte(HMI_ECU_IS_READY);
     f76:	8c ef       	ldi	r24, 0xFC	; 252
     f78:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <UART_sendByte>
    /* Now receive actual data from Control_ECU*/
    return UART_recieveByte();
     f7c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <UART_recieveByte>
}
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <operate_motor>:

void operate_motor(void)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     f8e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("Door is Unlocked");
     f92:	80 e6       	ldi	r24, 0x60	; 96
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>

	calc_15sec();
     f9a:	0e 94 43 07 	call	0xe86	; 0xe86 <calc_15sec>

	LCD_clearScreen();
     f9e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("Door is locked");
     fa2:	81 e7       	ldi	r24, 0x71	; 113
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>

	calc_15sec();
     faa:	0e 94 43 07 	call	0xe86	; 0xe86 <calc_15sec>
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <wrong_entry_3times>:

void wrong_entry_3times(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     fbc:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("ERROR !!!");
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>

	/*ask the CONTROL_ECU to activate the buzzer*/
	wait_and_sendByte(ERROR_ACTION);
     fc8:	87 ef       	ldi	r24, 0xF7	; 247
     fca:	0e 94 9f 07 	call	0xf3e	; 0xf3e <wait_and_sendByte>

	calc_1min();
     fce:	0e 94 02 07 	call	0xe04	; 0xe04 <calc_1min>

	g_wrong_entry_counter=0;
     fd2:	10 92 7c 01 	sts	0x017C, r1

	MainOptions();
     fd6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MainOptions>
}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <OpenDoor>:

void OpenDoor(void)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	64 97       	sbiw	r28, 0x14	; 20
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5],CheckPass;

	LCD_clearScreen();
     ff4:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
     ff8:	8a e8       	ldi	r24, 0x8A	; 138
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>

	/*Get the password from the user and store it in pass array
	 * and display '*' for each number entered and wait for pressing =(enter)*/
	getPassword(pass,5,0);
    1000:	ce 01       	movw	r24, r28
    1002:	40 96       	adiw	r24, 0x10	; 16
    1004:	65 e0       	ldi	r22, 0x05	; 5
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPassword>

	/* Send pass array to CONTROL_ECU through UART */
	wait_and_sendArray(pass,5);
    100c:	ce 01       	movw	r24, r28
    100e:	40 96       	adiw	r24, 0x10	; 16
    1010:	65 e0       	ldi	r22, 0x05	; 5
    1012:	0e 94 84 07 	call	0xf08	; 0xf08 <wait_and_sendArray>

	/* Receive password feedback from Control_ECU through UART */
	CheckPass=wait_and_receiveByte();
    1016:	0e 94 b3 07 	call	0xf66	; 0xf66 <wait_and_receiveByte>
    101a:	8f 87       	std	Y+15, r24	; 0x0f

	/*if the password is matched with the saved one in the EEPROM*/
	if(CheckPass==MATCHED_PASSWORDS)
    101c:	8f 85       	ldd	r24, Y+15	; 0x0f
    101e:	8e 3f       	cpi	r24, 0xFE	; 254
    1020:	29 f4       	brne	.+10     	; 0x102c <OpenDoor+0x4c>
	{
		g_wrong_entry_counter=0;
    1022:	10 92 7c 01 	sts	0x017C, r1
		operate_motor();
    1026:	0e 94 c3 07 	call	0xf86	; 0xf86 <operate_motor>
    102a:	94 c0       	rjmp	.+296    	; 0x1154 <OpenDoor+0x174>
	}

	/*if the password is unmatched with the saved one in the EEPROM*/
	else if(CheckPass== UNMATCHED_PASSWORDS)
    102c:	8f 85       	ldd	r24, Y+15	; 0x0f
    102e:	8d 3f       	cpi	r24, 0xFD	; 253
    1030:	09 f0       	breq	.+2      	; 0x1034 <OpenDoor+0x54>
    1032:	90 c0       	rjmp	.+288    	; 0x1154 <OpenDoor+0x174>
	{
		LCD_clearScreen();
    1034:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
		LCD_displayString("Wrong password");
    1038:	8a e9       	ldi	r24, 0x9A	; 154
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Retry");
    1040:	29 ea       	ldi	r18, 0xA9	; 169
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a8 e4       	ldi	r26, 0x48	; 72
    1054:	b3 e4       	ldi	r27, 0x43	; 67
    1056:	8b 87       	std	Y+11, r24	; 0x0b
    1058:	9c 87       	std	Y+12, r25	; 0x0c
    105a:	ad 87       	std	Y+13, r26	; 0x0d
    105c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1060:	7c 85       	ldd	r23, Y+12	; 0x0c
    1062:	8d 85       	ldd	r24, Y+13	; 0x0d
    1064:	9e 85       	ldd	r25, Y+14	; 0x0e
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a ef       	ldi	r20, 0xFA	; 250
    106c:	54 e4       	ldi	r21, 0x44	; 68
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8f 83       	std	Y+7, r24	; 0x07
    1078:	98 87       	std	Y+8, r25	; 0x08
    107a:	a9 87       	std	Y+9, r26	; 0x09
    107c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107e:	6f 81       	ldd	r22, Y+7	; 0x07
    1080:	78 85       	ldd	r23, Y+8	; 0x08
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <OpenDoor+0xc0>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9e 83       	std	Y+6, r25	; 0x06
    109c:	8d 83       	std	Y+5, r24	; 0x05
    109e:	3f c0       	rjmp	.+126    	; 0x111e <OpenDoor+0x13e>
	else if (__tmp > 65535)
    10a0:	6f 81       	ldd	r22, Y+7	; 0x07
    10a2:	78 85       	ldd	r23, Y+8	; 0x08
    10a4:	89 85       	ldd	r24, Y+9	; 0x09
    10a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <OpenDoor+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    10bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10be:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <OpenDoor+0x120>
    10e2:	88 ec       	ldi	r24, 0xC8	; 200
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <OpenDoor+0x10e>
    10f2:	9c 83       	std	Y+4, r25	; 0x04
    10f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <OpenDoor+0x102>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <OpenDoor+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9e 83       	std	Y+6, r25	; 0x06
    111c:	8d 83       	std	Y+5, r24	; 0x05
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <OpenDoor+0x14a>
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);/*delay for vision*/

		g_wrong_entry_counter++;
    1132:	80 91 7c 01 	lds	r24, 0x017C
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	80 93 7c 01 	sts	0x017C, r24
		if(g_wrong_entry_counter ==3)
    113c:	80 91 7c 01 	lds	r24, 0x017C
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	19 f4       	brne	.+6      	; 0x114a <OpenDoor+0x16a>
		{
			wrong_entry_3times();
    1144:	0e 94 da 07 	call	0xfb4	; 0xfb4 <wrong_entry_3times>
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <OpenDoor+0x174>
		}
		else
		{
			wait_and_sendByte(NO_ERROR);
    114a:	86 ef       	ldi	r24, 0xF6	; 246
    114c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <wait_and_sendByte>
			OpenDoor();
    1150:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <OpenDoor>
		}
	}
}
    1154:	64 96       	adiw	r28, 0x14	; 20
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <CreatePassword>:

void CreatePassword(void)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	a7 97       	sbiw	r28, 0x27	; 39
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[5]={0},pass2[5]={0},CheckPass;
    117a:	85 e0       	ldi	r24, 0x05	; 5
    117c:	fe 01       	movw	r30, r28
    117e:	7e 96       	adiw	r30, 0x1e	; 30
    1180:	df 01       	movw	r26, r30
    1182:	98 2f       	mov	r25, r24
    1184:	1d 92       	st	X+, r1
    1186:	9a 95       	dec	r25
    1188:	e9 f7       	brne	.-6      	; 0x1184 <CreatePassword+0x1e>
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	fe 01       	movw	r30, r28
    118e:	b3 96       	adiw	r30, 0x23	; 35
    1190:	df 01       	movw	r26, r30
    1192:	98 2f       	mov	r25, r24
    1194:	1d 92       	st	X+, r1
    1196:	9a 95       	dec	r25
    1198:	e9 f7       	brne	.-6      	; 0x1194 <CreatePassword+0x2e>

	LCD_clearScreen();
    119a:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    119e:	8a e8       	ldi	r24, 0x8A	; 138
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>

	/*Get the 1st password from the user and store it in pass1 array
	 * and display '*' for each number entered and wait for pressing =(enter)*/
	getPassword(pass1,5,0);
    11a6:	ce 01       	movw	r24, r28
    11a8:	4e 96       	adiw	r24, 0x1e	; 30
    11aa:	65 e0       	ldi	r22, 0x05	; 5
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPassword>

	/*clear screen and display the new string*/
	LCD_clearScreen();
    11b2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("plz re-enter the");
    11b6:	8f ea       	ldi	r24, 0xAF	; 175
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"same pass: ");
    11be:	20 ec       	ldi	r18, 0xC0	; 192
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>

	/*Get the 2nd password from the user and store it in pass2 array
	 * and display '*' for each number entered and wait for pressing =(enter)*/
	getPassword(pass2,5,11);
    11cc:	ce 01       	movw	r24, r28
    11ce:	83 96       	adiw	r24, 0x23	; 35
    11d0:	65 e0       	ldi	r22, 0x05	; 5
    11d2:	4b e0       	ldi	r20, 0x0B	; 11
    11d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPassword>

	/* Send pass1 array to CONTROL_ECU through UART */
	wait_and_sendArray(pass1,5);
    11d8:	ce 01       	movw	r24, r28
    11da:	4e 96       	adiw	r24, 0x1e	; 30
    11dc:	65 e0       	ldi	r22, 0x05	; 5
    11de:	0e 94 84 07 	call	0xf08	; 0xf08 <wait_and_sendArray>

	/* Send pass2 array to CONTROL_ECU through UART */
	wait_and_sendArray(pass2,5);
    11e2:	ce 01       	movw	r24, r28
    11e4:	83 96       	adiw	r24, 0x23	; 35
    11e6:	65 e0       	ldi	r22, 0x05	; 5
    11e8:	0e 94 84 07 	call	0xf08	; 0xf08 <wait_and_sendArray>

	/* Receive passwords feedback from Control_ECU through UART */
	CheckPass=wait_and_receiveByte();
    11ec:	0e 94 b3 07 	call	0xf66	; 0xf66 <wait_and_receiveByte>
    11f0:	8d 8f       	std	Y+29, r24	; 0x1d

	/*if 2 different passwords are entered ,the Control_ECU will send 0xFD(unmatched)
	 * then call again this function */
	if(CheckPass== UNMATCHED_PASSWORDS)
    11f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f4:	8d 3f       	cpi	r24, 0xFD	; 253
    11f6:	09 f0       	breq	.+2      	; 0x11fa <CreatePassword+0x94>
    11f8:	82 c0       	rjmp	.+260    	; 0x12fe <CreatePassword+0x198>
	{
		LCD_clearScreen();
    11fa:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
		LCD_displayString("Passwords differ");
    11fe:	8c ec       	ldi	r24, 0xCC	; 204
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Retry");
    1206:	29 ea       	ldi	r18, 0xA9	; 169
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	a9 01       	movw	r20, r18
    1210:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a8 e4       	ldi	r26, 0x48	; 72
    121a:	b3 e4       	ldi	r27, 0x43	; 67
    121c:	89 8f       	std	Y+25, r24	; 0x19
    121e:	9a 8f       	std	Y+26, r25	; 0x1a
    1220:	ab 8f       	std	Y+27, r26	; 0x1b
    1222:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1224:	69 8d       	ldd	r22, Y+25	; 0x19
    1226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    122a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	4a ef       	ldi	r20, 0xFA	; 250
    1232:	54 e4       	ldi	r21, 0x44	; 68
    1234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	8d 8b       	std	Y+21, r24	; 0x15
    123e:	9e 8b       	std	Y+22, r25	; 0x16
    1240:	af 8b       	std	Y+23, r26	; 0x17
    1242:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1244:	6d 89       	ldd	r22, Y+21	; 0x15
    1246:	7e 89       	ldd	r23, Y+22	; 0x16
    1248:	8f 89       	ldd	r24, Y+23	; 0x17
    124a:	98 8d       	ldd	r25, Y+24	; 0x18
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1258:	88 23       	and	r24, r24
    125a:	2c f4       	brge	.+10     	; 0x1266 <CreatePassword+0x100>
		__ticks = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9c 8b       	std	Y+20, r25	; 0x14
    1262:	8b 8b       	std	Y+19, r24	; 0x13
    1264:	3f c0       	rjmp	.+126    	; 0x12e4 <CreatePassword+0x17e>
	else if (__tmp > 65535)
    1266:	6d 89       	ldd	r22, Y+21	; 0x15
    1268:	7e 89       	ldd	r23, Y+22	; 0x16
    126a:	8f 89       	ldd	r24, Y+23	; 0x17
    126c:	98 8d       	ldd	r25, Y+24	; 0x18
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	57 e4       	ldi	r21, 0x47	; 71
    1276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127a:	18 16       	cp	r1, r24
    127c:	4c f5       	brge	.+82     	; 0x12d0 <CreatePassword+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127e:	69 8d       	ldd	r22, Y+25	; 0x19
    1280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e2       	ldi	r20, 0x20	; 32
    128c:	51 e4       	ldi	r21, 0x41	; 65
    128e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	9c 8b       	std	Y+20, r25	; 0x14
    12a4:	8b 8b       	std	Y+19, r24	; 0x13
    12a6:	0f c0       	rjmp	.+30     	; 0x12c6 <CreatePassword+0x160>
    12a8:	88 ec       	ldi	r24, 0xC8	; 200
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9a 8b       	std	Y+18, r25	; 0x12
    12ae:	89 8b       	std	Y+17, r24	; 0x11
    12b0:	89 89       	ldd	r24, Y+17	; 0x11
    12b2:	9a 89       	ldd	r25, Y+18	; 0x12
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <CreatePassword+0x14e>
    12b8:	9a 8b       	std	Y+18, r25	; 0x12
    12ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12bc:	8b 89       	ldd	r24, Y+19	; 0x13
    12be:	9c 89       	ldd	r25, Y+20	; 0x14
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c6:	8b 89       	ldd	r24, Y+19	; 0x13
    12c8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	69 f7       	brne	.-38     	; 0x12a8 <CreatePassword+0x142>
    12ce:	14 c0       	rjmp	.+40     	; 0x12f8 <CreatePassword+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d0:	6d 89       	ldd	r22, Y+21	; 0x15
    12d2:	7e 89       	ldd	r23, Y+22	; 0x16
    12d4:	8f 89       	ldd	r24, Y+23	; 0x17
    12d6:	98 8d       	ldd	r25, Y+24	; 0x18
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9c 8b       	std	Y+20, r25	; 0x14
    12e2:	8b 8b       	std	Y+19, r24	; 0x13
    12e4:	8b 89       	ldd	r24, Y+19	; 0x13
    12e6:	9c 89       	ldd	r25, Y+20	; 0x14
    12e8:	98 8b       	std	Y+16, r25	; 0x10
    12ea:	8f 87       	std	Y+15, r24	; 0x0f
    12ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ee:	98 89       	ldd	r25, Y+16	; 0x10
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <CreatePassword+0x18a>
    12f4:	98 8b       	std	Y+16, r25	; 0x10
    12f6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);/*delay for vision*/
		CreatePassword();
    12f8:	0e 94 b3 08 	call	0x1166	; 0x1166 <CreatePassword>
    12fc:	85 c0       	rjmp	.+266    	; 0x1408 <CreatePassword+0x2a2>
	}

	/*if 2 matched passwords are entered ,the Control_ECU will send 0xFE(matched)
	 * then go to the next step*/
	else if(CheckPass==MATCHED_PASSWORDS)
    12fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1300:	8e 3f       	cpi	r24, 0xFE	; 254
    1302:	09 f0       	breq	.+2      	; 0x1306 <CreatePassword+0x1a0>
    1304:	81 c0       	rjmp	.+258    	; 0x1408 <CreatePassword+0x2a2>
	{
		LCD_clearScreen();
    1306:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
		LCD_displayString("Password created");
    130a:	8d ed       	ldi	r24, 0xDD	; 221
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"successfully");
    1312:	2e ee       	ldi	r18, 0xEE	; 238
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a8 e4       	ldi	r26, 0x48	; 72
    1326:	b3 e4       	ldi	r27, 0x43	; 67
    1328:	8b 87       	std	Y+11, r24	; 0x0b
    132a:	9c 87       	std	Y+12, r25	; 0x0c
    132c:	ad 87       	std	Y+13, r26	; 0x0d
    132e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	6b 85       	ldd	r22, Y+11	; 0x0b
    1332:	7c 85       	ldd	r23, Y+12	; 0x0c
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a ef       	ldi	r20, 0xFA	; 250
    133e:	54 e4       	ldi	r21, 0x44	; 68
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	8f 83       	std	Y+7, r24	; 0x07
    134a:	98 87       	std	Y+8, r25	; 0x08
    134c:	a9 87       	std	Y+9, r26	; 0x09
    134e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1350:	6f 81       	ldd	r22, Y+7	; 0x07
    1352:	78 85       	ldd	r23, Y+8	; 0x08
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	9a 85       	ldd	r25, Y+10	; 0x0a
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	2c f4       	brge	.+10     	; 0x1372 <CreatePassword+0x20c>
		__ticks = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <CreatePassword+0x28a>
	else if (__tmp > 65535)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	4c f5       	brge	.+82     	; 0x13dc <CreatePassword+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e2       	ldi	r20, 0x20	; 32
    1398:	51 e4       	ldi	r21, 0x41	; 65
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <CreatePassword+0x26c>
    13b4:	88 ec       	ldi	r24, 0xC8	; 200
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <CreatePassword+0x25a>
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	69 f7       	brne	.-38     	; 0x13b4 <CreatePassword+0x24e>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <CreatePassword+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13dc:	6f 81       	ldd	r22, Y+7	; 0x07
    13de:	78 85       	ldd	r23, Y+8	; 0x08
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <CreatePassword+0x296>
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);/*delay for vision*/
		MainOptions();
    1404:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MainOptions>
	}
}
    1408:	a7 96       	adiw	r28, 0x27	; 39
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <ChangePassword>:

void ChangePassword(void)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	64 97       	sbiw	r28, 0x14	; 20
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5],CheckPass;
	LCD_clearScreen();
    142e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("plz enter old");
    1432:	8b ef       	ldi	r24, 0xFB	; 251
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"password:");
    143a:	29 e0       	ldi	r18, 0x09	; 9
    143c:	31 e0       	ldi	r19, 0x01	; 1
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>

	/*Get the password from the user and store it in pass array
	 * and display '*' for each number entered and wait for pressing =(enter)*/
	getPassword(pass,5,10);
    1448:	ce 01       	movw	r24, r28
    144a:	40 96       	adiw	r24, 0x10	; 16
    144c:	65 e0       	ldi	r22, 0x05	; 5
    144e:	4a e0       	ldi	r20, 0x0A	; 10
    1450:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPassword>

	/* Send pass array to CONTROL_ECU through UART */
	wait_and_sendArray(pass,5);
    1454:	ce 01       	movw	r24, r28
    1456:	40 96       	adiw	r24, 0x10	; 16
    1458:	65 e0       	ldi	r22, 0x05	; 5
    145a:	0e 94 84 07 	call	0xf08	; 0xf08 <wait_and_sendArray>

	/* Receive passwords feedback from Control_ECU through UART */
	CheckPass=wait_and_receiveByte();
    145e:	0e 94 b3 07 	call	0xf66	; 0xf66 <wait_and_receiveByte>
    1462:	8f 87       	std	Y+15, r24	; 0x0f

	/*if the password is matched with the saved one in the EEPROM*/
	if(CheckPass== MATCHED_PASSWORDS)
    1464:	8f 85       	ldd	r24, Y+15	; 0x0f
    1466:	8e 3f       	cpi	r24, 0xFE	; 254
    1468:	29 f4       	brne	.+10     	; 0x1474 <ChangePassword+0x5a>
	{
		g_wrong_entry_counter=0;
    146a:	10 92 7c 01 	sts	0x017C, r1
		CreatePassword();
    146e:	0e 94 b3 08 	call	0x1166	; 0x1166 <CreatePassword>
    1472:	94 c0       	rjmp	.+296    	; 0x159c <ChangePassword+0x182>
	}

	/*if the password is unmatched with the saved one on the EEPROM*/
	else if(CheckPass==UNMATCHED_PASSWORDS)
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	8d 3f       	cpi	r24, 0xFD	; 253
    1478:	09 f0       	breq	.+2      	; 0x147c <ChangePassword+0x62>
    147a:	90 c0       	rjmp	.+288    	; 0x159c <ChangePassword+0x182>
	{
		LCD_clearScreen();
    147c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
		LCD_displayString("Wrong password");
    1480:	8a e9       	ldi	r24, 0x9A	; 154
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Retry");
    1488:	29 ea       	ldi	r18, 0xA9	; 169
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	a9 01       	movw	r20, r18
    1492:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a8 e4       	ldi	r26, 0x48	; 72
    149c:	b3 e4       	ldi	r27, 0x43	; 67
    149e:	8b 87       	std	Y+11, r24	; 0x0b
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	ad 87       	std	Y+13, r26	; 0x0d
    14a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a ef       	ldi	r20, 0xFA	; 250
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	98 87       	std	Y+8, r25	; 0x08
    14c2:	a9 87       	std	Y+9, r26	; 0x09
    14c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c6:	6f 81       	ldd	r22, Y+7	; 0x07
    14c8:	78 85       	ldd	r23, Y+8	; 0x08
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <ChangePassword+0xce>
		__ticks = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <ChangePassword+0x14c>
	else if (__tmp > 65535)
    14e8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ea:	78 85       	ldd	r23, Y+8	; 0x08
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	4c f5       	brge	.+82     	; 0x1552 <ChangePassword+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <ChangePassword+0x12e>
    152a:	88 ec       	ldi	r24, 0xC8	; 200
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <ChangePassword+0x11c>
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f7       	brne	.-38     	; 0x152a <ChangePassword+0x110>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <ChangePassword+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <ChangePassword+0x158>
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);/*delay for vision*/

		g_wrong_entry_counter++;
    157a:	80 91 7c 01 	lds	r24, 0x017C
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	80 93 7c 01 	sts	0x017C, r24
		if(g_wrong_entry_counter ==3)
    1584:	80 91 7c 01 	lds	r24, 0x017C
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	19 f4       	brne	.+6      	; 0x1592 <ChangePassword+0x178>
		{
			wrong_entry_3times();
    158c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <wrong_entry_3times>
    1590:	05 c0       	rjmp	.+10     	; 0x159c <ChangePassword+0x182>
		}
		else
		{
			wait_and_sendByte(NO_ERROR);
    1592:	86 ef       	ldi	r24, 0xF6	; 246
    1594:	0e 94 9f 07 	call	0xf3e	; 0xf3e <wait_and_sendByte>
			ChangePassword();
    1598:	0e 94 0d 0a 	call	0x141a	; 0x141a <ChangePassword>
		}
	}
}
    159c:	64 96       	adiw	r28, 0x14	; 20
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <MainOptions>:

/*function to display main options and get choice from the user then send it to the control_ecu*/
void MainOptions(void)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	LCD_clearScreen();
    15b8:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    15bc:	83 e1       	ldi	r24, 0x13	; 19
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    15c4:	21 e2       	ldi	r18, 0x21	; 33
    15c6:	31 e0       	ldi	r19, 0x01	; 1
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	a9 01       	movw	r20, r18
    15ce:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>

	key=KEYPAD_getPressedKey();
    15d2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <MainOptions+0x30>

	while(key != PLUSBUTTON && key != MINUSBUTTON)
	{
		KEYPAD_getPressedKey();
    15da:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
	LCD_displayString("+ : Open Door");
	LCD_displayStringRowColumn(1,0,"- : Change Pass");

	key=KEYPAD_getPressedKey();

	while(key != PLUSBUTTON && key != MINUSBUTTON)
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	8b 32       	cpi	r24, 0x2B	; 43
    15e2:	19 f0       	breq	.+6      	; 0x15ea <MainOptions+0x3c>
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	8d 32       	cpi	r24, 0x2D	; 45
    15e8:	c1 f7       	brne	.-16     	; 0x15da <MainOptions+0x2c>
	{
		KEYPAD_getPressedKey();
	}
	if(key == PLUSBUTTON)
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	8b 32       	cpi	r24, 0x2B	; 43
    15ee:	31 f4       	brne	.+12     	; 0x15fc <MainOptions+0x4e>
	{
		wait_and_sendByte(OPEN_DOOR);
    15f0:	85 ef       	ldi	r24, 0xF5	; 245
    15f2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <wait_and_sendByte>
		OpenDoor();
    15f6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <OpenDoor>
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <MainOptions+0x5e>
	}
	else if(key == MINUSBUTTON)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	8d 32       	cpi	r24, 0x2D	; 45
    1600:	29 f4       	brne	.+10     	; 0x160c <MainOptions+0x5e>
	{
		wait_and_sendByte(CHANGE_PASS);
    1602:	84 ef       	ldi	r24, 0xF4	; 244
    1604:	0e 94 9f 07 	call	0xf3e	; 0xf3e <wait_and_sendByte>
		ChangePassword();
    1608:	0e 94 0d 0a 	call	0x141a	; 0x141a <ChangePassword>
	}
}
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <main>:

int main()
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	a8 97       	sbiw	r28, 0x28	; 40
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<7);/*enable I-Bit for timer interrupt*/
    1628:	af e5       	ldi	r26, 0x5F	; 95
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ef e5       	ldi	r30, 0x5F	; 95
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	80 68       	ori	r24, 0x80	; 128
    1634:	8c 93       	st	X, r24

	UART_ConfigType UART_Frame={Eight_Bits,Even_Parity,One_StopBit,9600};
    1636:	ce 01       	movw	r24, r28
    1638:	4d 96       	adiw	r24, 0x1d	; 29
    163a:	9d a3       	std	Y+37, r25	; 0x25
    163c:	8c a3       	std	Y+36, r24	; 0x24
    163e:	e1 e7       	ldi	r30, 0x71	; 113
    1640:	f1 e0       	ldi	r31, 0x01	; 1
    1642:	ff a3       	std	Y+39, r31	; 0x27
    1644:	ee a3       	std	Y+38, r30	; 0x26
    1646:	f7 e0       	ldi	r31, 0x07	; 7
    1648:	f8 a7       	std	Y+40, r31	; 0x28
    164a:	ee a1       	ldd	r30, Y+38	; 0x26
    164c:	ff a1       	ldd	r31, Y+39	; 0x27
    164e:	00 80       	ld	r0, Z
    1650:	8e a1       	ldd	r24, Y+38	; 0x26
    1652:	9f a1       	ldd	r25, Y+39	; 0x27
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	9f a3       	std	Y+39, r25	; 0x27
    1658:	8e a3       	std	Y+38, r24	; 0x26
    165a:	ec a1       	ldd	r30, Y+36	; 0x24
    165c:	fd a1       	ldd	r31, Y+37	; 0x25
    165e:	00 82       	st	Z, r0
    1660:	8c a1       	ldd	r24, Y+36	; 0x24
    1662:	9d a1       	ldd	r25, Y+37	; 0x25
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	9d a3       	std	Y+37, r25	; 0x25
    1668:	8c a3       	std	Y+36, r24	; 0x24
    166a:	98 a5       	ldd	r25, Y+40	; 0x28
    166c:	91 50       	subi	r25, 0x01	; 1
    166e:	98 a7       	std	Y+40, r25	; 0x28
    1670:	e8 a5       	ldd	r30, Y+40	; 0x28
    1672:	ee 23       	and	r30, r30
    1674:	51 f7       	brne	.-44     	; 0x164a <main+0x36>
	UART_init(&UART_Frame);
    1676:	ce 01       	movw	r24, r28
    1678:	4d 96       	adiw	r24, 0x1d	; 29
    167a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <UART_init>

	LCD_init();
    167e:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_init>

	LCD_displayString("Door Locker");
    1682:	81 e3       	ldi	r24, 0x31	; 49
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"Security System");
    168a:	2d e3       	ldi	r18, 0x3D	; 61
    168c:	31 e0       	ldi	r19, 0x01	; 1
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	a9 01       	movw	r20, r18
    1694:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_displayStringRowColumn>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a8 e4       	ldi	r26, 0x48	; 72
    169e:	b3 e4       	ldi	r27, 0x43	; 67
    16a0:	89 8f       	std	Y+25, r24	; 0x19
    16a2:	9a 8f       	std	Y+26, r25	; 0x1a
    16a4:	ab 8f       	std	Y+27, r26	; 0x1b
    16a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a8:	69 8d       	ldd	r22, Y+25	; 0x19
    16aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a ef       	ldi	r20, 0xFA	; 250
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	8d 8b       	std	Y+21, r24	; 0x15
    16c2:	9e 8b       	std	Y+22, r25	; 0x16
    16c4:	af 8b       	std	Y+23, r26	; 0x17
    16c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16c8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ca:	7e 89       	ldd	r23, Y+22	; 0x16
    16cc:	8f 89       	ldd	r24, Y+23	; 0x17
    16ce:	98 8d       	ldd	r25, Y+24	; 0x18
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e8       	ldi	r20, 0x80	; 128
    16d6:	5f e3       	ldi	r21, 0x3F	; 63
    16d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16dc:	88 23       	and	r24, r24
    16de:	2c f4       	brge	.+10     	; 0x16ea <main+0xd6>
		__ticks = 1;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	9c 8b       	std	Y+20, r25	; 0x14
    16e6:	8b 8b       	std	Y+19, r24	; 0x13
    16e8:	3f c0       	rjmp	.+126    	; 0x1768 <main+0x154>
	else if (__tmp > 65535)
    16ea:	6d 89       	ldd	r22, Y+21	; 0x15
    16ec:	7e 89       	ldd	r23, Y+22	; 0x16
    16ee:	8f 89       	ldd	r24, Y+23	; 0x17
    16f0:	98 8d       	ldd	r25, Y+24	; 0x18
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	4f e7       	ldi	r20, 0x7F	; 127
    16f8:	57 e4       	ldi	r21, 0x47	; 71
    16fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16fe:	18 16       	cp	r1, r24
    1700:	4c f5       	brge	.+82     	; 0x1754 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1702:	69 8d       	ldd	r22, Y+25	; 0x19
    1704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
    172a:	0f c0       	rjmp	.+30     	; 0x174a <main+0x136>
    172c:	88 ec       	ldi	r24, 0xC8	; 200
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9a 8b       	std	Y+18, r25	; 0x12
    1732:	89 8b       	std	Y+17, r24	; 0x11
    1734:	89 89       	ldd	r24, Y+17	; 0x11
    1736:	9a 89       	ldd	r25, Y+18	; 0x12
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <main+0x124>
    173c:	9a 8b       	std	Y+18, r25	; 0x12
    173e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1740:	8b 89       	ldd	r24, Y+19	; 0x13
    1742:	9c 89       	ldd	r25, Y+20	; 0x14
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	9c 8b       	std	Y+20, r25	; 0x14
    1748:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174a:	8b 89       	ldd	r24, Y+19	; 0x13
    174c:	9c 89       	ldd	r25, Y+20	; 0x14
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	69 f7       	brne	.-38     	; 0x172c <main+0x118>
    1752:	14 c0       	rjmp	.+40     	; 0x177c <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1754:	6d 89       	ldd	r22, Y+21	; 0x15
    1756:	7e 89       	ldd	r23, Y+22	; 0x16
    1758:	8f 89       	ldd	r24, Y+23	; 0x17
    175a:	98 8d       	ldd	r25, Y+24	; 0x18
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9c 8b       	std	Y+20, r25	; 0x14
    1766:	8b 8b       	std	Y+19, r24	; 0x13
    1768:	8b 89       	ldd	r24, Y+19	; 0x13
    176a:	9c 89       	ldd	r25, Y+20	; 0x14
    176c:	98 8b       	std	Y+16, r25	; 0x10
    176e:	8f 87       	std	Y+15, r24	; 0x0f
    1770:	8f 85       	ldd	r24, Y+15	; 0x0f
    1772:	98 89       	ldd	r25, Y+16	; 0x10
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <main+0x160>
    1778:	98 8b       	std	Y+16, r25	; 0x10
    177a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);

	LCD_clearScreen();
    177c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_clearScreen>
	LCD_displayString("Create password");
    1780:	8d e4       	ldi	r24, 0x4D	; 77
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a8 ec       	ldi	r26, 0xC8	; 200
    178e:	b2 e4       	ldi	r27, 0x42	; 66
    1790:	8b 87       	std	Y+11, r24	; 0x0b
    1792:	9c 87       	std	Y+12, r25	; 0x0c
    1794:	ad 87       	std	Y+13, r26	; 0x0d
    1796:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a ef       	ldi	r20, 0xFA	; 250
    17a6:	54 e4       	ldi	r21, 0x44	; 68
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8f 83       	std	Y+7, r24	; 0x07
    17b2:	98 87       	std	Y+8, r25	; 0x08
    17b4:	a9 87       	std	Y+9, r26	; 0x09
    17b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <main+0x1c6>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <main+0x244>
	else if (__tmp > 65535)
    17da:	6f 81       	ldd	r22, Y+7	; 0x07
    17dc:	78 85       	ldd	r23, Y+8	; 0x08
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <main+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	0f c0       	rjmp	.+30     	; 0x183a <main+0x226>
    181c:	88 ec       	ldi	r24, 0xC8	; 200
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <main+0x214>
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <main+0x208>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <main+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <main+0x250>
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	CreatePassword();
    186c:	0e 94 b3 08 	call	0x1166	; 0x1166 <CreatePassword>
    1870:	ff cf       	rjmp	.-2      	; 0x1870 <main+0x25c>

00001872 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <GPIO_setupPinDirection+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <GPIO_setupPinDirection+0x8>
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	6a 83       	std	Y+2, r22	; 0x02
    1884:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	08 f0       	brcs	.+2      	; 0x188e <GPIO_setupPinDirection+0x1c>
    188c:	d5 c0       	rjmp	.+426    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	08 f0       	brcs	.+2      	; 0x1896 <GPIO_setupPinDirection+0x24>
    1894:	d1 c0       	rjmp	.+418    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3d 83       	std	Y+5, r19	; 0x05
    189e:	2c 83       	std	Y+4, r18	; 0x04
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <GPIO_setupPinDirection+0x3a>
    18aa:	43 c0       	rjmp	.+134    	; 0x1932 <GPIO_setupPinDirection+0xc0>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <GPIO_setupPinDirection+0x4e>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	71 f0       	breq	.+28     	; 0x18da <GPIO_setupPinDirection+0x68>
    18be:	bc c0       	rjmp	.+376    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
    18c0:	2c 81       	ldd	r18, Y+4	; 0x04
    18c2:	3d 81       	ldd	r19, Y+5	; 0x05
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <GPIO_setupPinDirection+0x5a>
    18ca:	5f c0       	rjmp	.+190    	; 0x198a <GPIO_setupPinDirection+0x118>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <GPIO_setupPinDirection+0x66>
    18d6:	85 c0       	rjmp	.+266    	; 0x19e2 <GPIO_setupPinDirection+0x170>
    18d8:	af c0       	rjmp	.+350    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	a1 f4       	brne	.+40     	; 0x1908 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18e0:	aa e3       	ldi	r26, 0x3A	; 58
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ea e3       	ldi	r30, 0x3A	; 58
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <GPIO_setupPinDirection+0x8c>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <GPIO_setupPinDirection+0x88>
    1902:	84 2b       	or	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	98 c0       	rjmp	.+304    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1908:	aa e3       	ldi	r26, 0x3A	; 58
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ea e3       	ldi	r30, 0x3A	; 58
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <GPIO_setupPinDirection+0xb4>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <GPIO_setupPinDirection+0xb0>
    192a:	80 95       	com	r24
    192c:	84 23       	and	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	83 c0       	rjmp	.+262    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	a1 f4       	brne	.+40     	; 0x1960 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1938:	a7 e3       	ldi	r26, 0x37	; 55
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e7 e3       	ldi	r30, 0x37	; 55
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_setupPinDirection+0xe4>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_setupPinDirection+0xe0>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	6c c0       	rjmp	.+216    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1960:	a7 e3       	ldi	r26, 0x37	; 55
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e7 e3       	ldi	r30, 0x37	; 55
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <GPIO_setupPinDirection+0x10c>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <GPIO_setupPinDirection+0x108>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	57 c0       	rjmp	.+174    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1990:	a4 e3       	ldi	r26, 0x34	; 52
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e4 e3       	ldi	r30, 0x34	; 52
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <GPIO_setupPinDirection+0x13c>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <GPIO_setupPinDirection+0x138>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	40 c0       	rjmp	.+128    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19b8:	a4 e3       	ldi	r26, 0x34	; 52
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e4 e3       	ldi	r30, 0x34	; 52
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GPIO_setupPinDirection+0x164>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <GPIO_setupPinDirection+0x160>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	2b c0       	rjmp	.+86     	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	a1 f4       	brne	.+40     	; 0x1a10 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19e8:	a1 e3       	ldi	r26, 0x31	; 49
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e1 e3       	ldi	r30, 0x31	; 49
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <GPIO_setupPinDirection+0x194>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <GPIO_setupPinDirection+0x190>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a10:	a1 e3       	ldi	r26, 0x31	; 49
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e1 e3       	ldi	r30, 0x31	; 49
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_setupPinDirection+0x1bc>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_setupPinDirection+0x1b8>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <GPIO_writePin+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <GPIO_writePin+0x8>
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	6a 83       	std	Y+2, r22	; 0x02
    1a5a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	88 30       	cpi	r24, 0x08	; 8
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <GPIO_writePin+0x1c>
    1a62:	d5 c0       	rjmp	.+426    	; 0x1c0e <GPIO_writePin+0x1c6>
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <GPIO_writePin+0x24>
    1a6a:	d1 c0       	rjmp	.+418    	; 0x1c0e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3d 83       	std	Y+5, r19	; 0x05
    1a74:	2c 83       	std	Y+4, r18	; 0x04
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <GPIO_writePin+0x3a>
    1a80:	43 c0       	rjmp	.+134    	; 0x1b08 <GPIO_writePin+0xc0>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <GPIO_writePin+0x4e>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	71 f0       	breq	.+28     	; 0x1ab0 <GPIO_writePin+0x68>
    1a94:	bc c0       	rjmp	.+376    	; 0x1c0e <GPIO_writePin+0x1c6>
    1a96:	2c 81       	ldd	r18, Y+4	; 0x04
    1a98:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <GPIO_writePin+0x5a>
    1aa0:	5f c0       	rjmp	.+190    	; 0x1b60 <GPIO_writePin+0x118>
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <GPIO_writePin+0x66>
    1aac:	85 c0       	rjmp	.+266    	; 0x1bb8 <GPIO_writePin+0x170>
    1aae:	af c0       	rjmp	.+350    	; 0x1c0e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	a1 f4       	brne	.+40     	; 0x1ade <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ab6:	ab e3       	ldi	r26, 0x3B	; 59
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	eb e3       	ldi	r30, 0x3B	; 59
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <GPIO_writePin+0x8c>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <GPIO_writePin+0x88>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	98 c0       	rjmp	.+304    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ade:	ab e3       	ldi	r26, 0x3B	; 59
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	eb e3       	ldi	r30, 0x3B	; 59
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <GPIO_writePin+0xb4>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <GPIO_writePin+0xb0>
    1b00:	80 95       	com	r24
    1b02:	84 23       	and	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	83 c0       	rjmp	.+262    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	a1 f4       	brne	.+40     	; 0x1b36 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b0e:	a8 e3       	ldi	r26, 0x38	; 56
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <GPIO_writePin+0xe4>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <GPIO_writePin+0xe0>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	6c c0       	rjmp	.+216    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b36:	a8 e3       	ldi	r26, 0x38	; 56
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e8 e3       	ldi	r30, 0x38	; 56
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <GPIO_writePin+0x10c>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <GPIO_writePin+0x108>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	57 c0       	rjmp	.+174    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	a1 f4       	brne	.+40     	; 0x1b8e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b66:	a5 e3       	ldi	r26, 0x35	; 53
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e5 e3       	ldi	r30, 0x35	; 53
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_writePin+0x13c>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_writePin+0x138>
    1b88:	84 2b       	or	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	40 c0       	rjmp	.+128    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b8e:	a5 e3       	ldi	r26, 0x35	; 53
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e5 e3       	ldi	r30, 0x35	; 53
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <GPIO_writePin+0x164>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <GPIO_writePin+0x160>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	2b c0       	rjmp	.+86     	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	a1 f4       	brne	.+40     	; 0x1be6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1bbe:	a2 e3       	ldi	r26, 0x32	; 50
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <GPIO_writePin+0x194>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <GPIO_writePin+0x190>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1be6:	a2 e3       	ldi	r26, 0x32	; 50
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <GPIO_writePin+0x1bc>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <GPIO_writePin+0x1b8>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <GPIO_readPin+0x6>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <GPIO_readPin+0x8>
    1c26:	0f 92       	push	r0
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
    1c2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c30:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	88 30       	cpi	r24, 0x08	; 8
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <GPIO_readPin+0x1c>
    1c38:	84 c0       	rjmp	.+264    	; 0x1d42 <GPIO_readPin+0x124>
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	84 30       	cpi	r24, 0x04	; 4
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <GPIO_readPin+0x24>
    1c40:	80 c0       	rjmp	.+256    	; 0x1d42 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3d 83       	std	Y+5, r19	; 0x05
    1c4a:	2c 83       	std	Y+4, r18	; 0x04
    1c4c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c4e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c50:	41 30       	cpi	r20, 0x01	; 1
    1c52:	51 05       	cpc	r21, r1
    1c54:	79 f1       	breq	.+94     	; 0x1cb4 <GPIO_readPin+0x96>
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	82 30       	cpi	r24, 0x02	; 2
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	34 f4       	brge	.+12     	; 0x1c6c <GPIO_readPin+0x4e>
    1c60:	2c 81       	ldd	r18, Y+4	; 0x04
    1c62:	3d 81       	ldd	r19, Y+5	; 0x05
    1c64:	21 15       	cp	r18, r1
    1c66:	31 05       	cpc	r19, r1
    1c68:	69 f0       	breq	.+26     	; 0x1c84 <GPIO_readPin+0x66>
    1c6a:	6b c0       	rjmp	.+214    	; 0x1d42 <GPIO_readPin+0x124>
    1c6c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c6e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c70:	42 30       	cpi	r20, 0x02	; 2
    1c72:	51 05       	cpc	r21, r1
    1c74:	b9 f1       	breq	.+110    	; 0x1ce4 <GPIO_readPin+0xc6>
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <GPIO_readPin+0x64>
    1c80:	49 c0       	rjmp	.+146    	; 0x1d14 <GPIO_readPin+0xf6>
    1c82:	5f c0       	rjmp	.+190    	; 0x1d42 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c84:	e9 e3       	ldi	r30, 0x39	; 57
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <GPIO_readPin+0x7e>
    1c98:	55 95       	asr	r21
    1c9a:	47 95       	ror	r20
    1c9c:	8a 95       	dec	r24
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <GPIO_readPin+0x7a>
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	81 70       	andi	r24, 0x01	; 1
    1ca4:	90 70       	andi	r25, 0x00	; 0
    1ca6:	88 23       	and	r24, r24
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	49 c0       	rjmp	.+146    	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
    1cb2:	47 c0       	rjmp	.+142    	; 0x1d42 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cb4:	e6 e3       	ldi	r30, 0x36	; 54
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a9 01       	movw	r20, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <GPIO_readPin+0xae>
    1cc8:	55 95       	asr	r21
    1cca:	47 95       	ror	r20
    1ccc:	8a 95       	dec	r24
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <GPIO_readPin+0xaa>
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	90 70       	andi	r25, 0x00	; 0
    1cd6:	88 23       	and	r24, r24
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	31 c0       	rjmp	.+98     	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ce0:	19 82       	std	Y+1, r1	; 0x01
    1ce2:	2f c0       	rjmp	.+94     	; 0x1d42 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ce4:	e3 e3       	ldi	r30, 0x33	; 51
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <GPIO_readPin+0xde>
    1cf8:	55 95       	asr	r21
    1cfa:	47 95       	ror	r20
    1cfc:	8a 95       	dec	r24
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <GPIO_readPin+0xda>
    1d00:	ca 01       	movw	r24, r20
    1d02:	81 70       	andi	r24, 0x01	; 1
    1d04:	90 70       	andi	r25, 0x00	; 0
    1d06:	88 23       	and	r24, r24
    1d08:	19 f0       	breq	.+6      	; 0x1d10 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	19 c0       	rjmp	.+50     	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d10:	19 82       	std	Y+1, r1	; 0x01
    1d12:	17 c0       	rjmp	.+46     	; 0x1d42 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d14:	e0 e3       	ldi	r30, 0x30	; 48
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a9 01       	movw	r20, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <GPIO_readPin+0x10e>
    1d28:	55 95       	asr	r21
    1d2a:	47 95       	ror	r20
    1d2c:	8a 95       	dec	r24
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <GPIO_readPin+0x10a>
    1d30:	ca 01       	movw	r24, r20
    1d32:	81 70       	andi	r24, 0x01	; 1
    1d34:	90 70       	andi	r25, 0x00	; 0
    1d36:	88 23       	and	r24, r24
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d40:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <GPIO_setupPortDirection+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <GPIO_setupPortDirection+0x8>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	90 f5       	brcc	.+100    	; 0x1dce <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	3c 83       	std	Y+4, r19	; 0x04
    1d72:	2b 83       	std	Y+3, r18	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	d1 f0       	breq	.+52     	; 0x1db2 <GPIO_setupPortDirection+0x5e>
    1d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	22 30       	cpi	r18, 0x02	; 2
    1d84:	31 05       	cpc	r19, r1
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <GPIO_setupPortDirection+0x3e>
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	61 f0       	breq	.+24     	; 0x1da8 <GPIO_setupPortDirection+0x54>
    1d90:	1e c0       	rjmp	.+60     	; 0x1dce <GPIO_setupPortDirection+0x7a>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <GPIO_setupPortDirection+0x68>
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	83 30       	cpi	r24, 0x03	; 3
    1da2:	91 05       	cpc	r25, r1
    1da4:	81 f0       	breq	.+32     	; 0x1dc6 <GPIO_setupPortDirection+0x72>
    1da6:	13 c0       	rjmp	.+38     	; 0x1dce <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1da8:	ea e3       	ldi	r30, 0x3A	; 58
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	80 83       	st	Z, r24
    1db0:	0e c0       	rjmp	.+28     	; 0x1dce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1db2:	e7 e3       	ldi	r30, 0x37	; 55
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	80 83       	st	Z, r24
    1dba:	09 c0       	rjmp	.+18     	; 0x1dce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dbc:	e4 e3       	ldi	r30, 0x34	; 52
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	80 83       	st	Z, r24
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1dc6:	e1 e3       	ldi	r30, 0x31	; 49
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <GPIO_writePort+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <GPIO_writePort+0x8>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	90 f5       	brcc	.+100    	; 0x1e56 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	3c 83       	std	Y+4, r19	; 0x04
    1dfa:	2b 83       	std	Y+3, r18	; 0x03
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	91 05       	cpc	r25, r1
    1e04:	d1 f0       	breq	.+52     	; 0x1e3a <GPIO_writePort+0x5e>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <GPIO_writePort+0x3e>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <GPIO_writePort+0x54>
    1e18:	1e c0       	rjmp	.+60     	; 0x1e56 <GPIO_writePort+0x7a>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	81 f0       	breq	.+32     	; 0x1e44 <GPIO_writePort+0x68>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	81 f0       	breq	.+32     	; 0x1e4e <GPIO_writePort+0x72>
    1e2e:	13 c0       	rjmp	.+38     	; 0x1e56 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e30:	eb e3       	ldi	r30, 0x3B	; 59
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 83       	st	Z, r24
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e3a:	e8 e3       	ldi	r30, 0x38	; 56
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	80 83       	st	Z, r24
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	80 83       	st	Z, r24
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e4e:	e2 e3       	ldi	r30, 0x32	; 50
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <GPIO_readPort+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <GPIO_readPort+0x8>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e72:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	90 f5       	brcc	.+100    	; 0x1ede <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3c 83       	std	Y+4, r19	; 0x04
    1e82:	2b 83       	std	Y+3, r18	; 0x03
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	d1 f0       	breq	.+52     	; 0x1ec2 <GPIO_readPort+0x5e>
    1e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e90:	3c 81       	ldd	r19, Y+4	; 0x04
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <GPIO_readPort+0x3e>
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	61 f0       	breq	.+24     	; 0x1eb8 <GPIO_readPort+0x54>
    1ea0:	1e c0       	rjmp	.+60     	; 0x1ede <GPIO_readPort+0x7a>
    1ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	81 f0       	breq	.+32     	; 0x1ecc <GPIO_readPort+0x68>
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	81 f0       	breq	.+32     	; 0x1ed6 <GPIO_readPort+0x72>
    1eb6:	13 c0       	rjmp	.+38     	; 0x1ede <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1eb8:	e9 e3       	ldi	r30, 0x39	; 57
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ec2:	e6 e3       	ldi	r30, 0x36	; 54
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ecc:	e3 e3       	ldi	r30, 0x33	; 51
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ed6:	e0 e3       	ldi	r30, 0x30	; 48
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	60 97       	sbiw	r28, 0x10	; 16
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	62 e0       	ldi	r22, 0x02	; 2
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	63 e0       	ldi	r22, 0x03	; 3
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	64 e0       	ldi	r22, 0x04	; 4
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	65 e0       	ldi	r22, 0x05	; 5
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	66 e0       	ldi	r22, 0x06	; 6
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	67 e0       	ldi	r22, 0x07	; 7
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f52:	1f 86       	std	Y+15, r1	; 0x0f
    1f54:	ab c0       	rjmp	.+342    	; 0x20ac <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f6a:	18 8a       	std	Y+16, r1	; 0x10
    1f6c:	22 c0       	rjmp	.+68     	; 0x1fb2 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f6e:	88 89       	ldd	r24, Y+16	; 0x10
    1f70:	98 2f       	mov	r25, r24
    1f72:	9c 5f       	subi	r25, 0xFC	; 252
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	69 2f       	mov	r22, r25
    1f78:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <GPIO_readPin>
    1f7c:	88 23       	and	r24, r24
    1f7e:	b1 f4       	brne	.+44     	; 0x1fac <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	98 2f       	mov	r25, r24
    1f90:	88 89       	ldd	r24, Y+16	; 0x10
    1f92:	89 0f       	add	r24, r25
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1f9a:	60 96       	adiw	r28, 0x10	; 16
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fac:	88 89       	ldd	r24, Y+16	; 0x10
    1fae:	8f 5f       	subi	r24, 0xFF	; 255
    1fb0:	88 8b       	std	Y+16, r24	; 0x10
    1fb2:	88 89       	ldd	r24, Y+16	; 0x10
    1fb4:	84 30       	cpi	r24, 0x04	; 4
    1fb6:	d8 f2       	brcs	.-74     	; 0x1f6e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc8:	b0 e4       	ldi	r27, 0x40	; 64
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <KEYPAD_getPressedKey+0x186>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <KEYPAD_getPressedKey+0x174>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <KEYPAD_getPressedKey+0x168>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <KEYPAD_getPressedKey+0x1b0>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	8f 87       	std	Y+15, r24	; 0x0f
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	84 30       	cpi	r24, 0x04	; 4
    20b0:	08 f4       	brcc	.+2      	; 0x20b4 <KEYPAD_getPressedKey+0x1c6>
    20b2:	51 cf       	rjmp	.-350    	; 0x1f56 <KEYPAD_getPressedKey+0x68>
    20b4:	4e cf       	rjmp	.-356    	; 0x1f52 <KEYPAD_getPressedKey+0x64>

000020b6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <KEYPAD_4x4_adjustKeyNumber+0x6>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <KEYPAD_4x4_adjustKeyNumber+0x8>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20c4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	3c 83       	std	Y+4, r19	; 0x04
    20ce:	2b 83       	std	Y+3, r18	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	88 30       	cpi	r24, 0x08	; 8
    20d6:	91 05       	cpc	r25, r1
    20d8:	09 f4       	brne	.+2      	; 0x20dc <KEYPAD_4x4_adjustKeyNumber+0x26>
    20da:	70 c0       	rjmp	.+224    	; 0x21bc <KEYPAD_4x4_adjustKeyNumber+0x106>
    20dc:	2b 81       	ldd	r18, Y+3	; 0x03
    20de:	3c 81       	ldd	r19, Y+4	; 0x04
    20e0:	29 30       	cpi	r18, 0x09	; 9
    20e2:	31 05       	cpc	r19, r1
    20e4:	5c f5       	brge	.+86     	; 0x213c <KEYPAD_4x4_adjustKeyNumber+0x86>
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	84 30       	cpi	r24, 0x04	; 4
    20ec:	91 05       	cpc	r25, r1
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    20f0:	59 c0       	rjmp	.+178    	; 0x21a4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    20f2:	2b 81       	ldd	r18, Y+3	; 0x03
    20f4:	3c 81       	ldd	r19, Y+4	; 0x04
    20f6:	25 30       	cpi	r18, 0x05	; 5
    20f8:	31 05       	cpc	r19, r1
    20fa:	9c f4       	brge	.+38     	; 0x2122 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	82 30       	cpi	r24, 0x02	; 2
    2102:	91 05       	cpc	r25, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2106:	48 c0       	rjmp	.+144    	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2108:	2b 81       	ldd	r18, Y+3	; 0x03
    210a:	3c 81       	ldd	r19, Y+4	; 0x04
    210c:	23 30       	cpi	r18, 0x03	; 3
    210e:	31 05       	cpc	r19, r1
    2110:	0c f0       	brlt	.+2      	; 0x2114 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2112:	45 c0       	rjmp	.+138    	; 0x219e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    211e:	39 c0       	rjmp	.+114    	; 0x2192 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2120:	67 c0       	rjmp	.+206    	; 0x21f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2122:	2b 81       	ldd	r18, Y+3	; 0x03
    2124:	3c 81       	ldd	r19, Y+4	; 0x04
    2126:	26 30       	cpi	r18, 0x06	; 6
    2128:	31 05       	cpc	r19, r1
    212a:	09 f4       	brne	.+2      	; 0x212e <KEYPAD_4x4_adjustKeyNumber+0x78>
    212c:	41 c0       	rjmp	.+130    	; 0x21b0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	87 30       	cpi	r24, 0x07	; 7
    2134:	91 05       	cpc	r25, r1
    2136:	0c f0       	brlt	.+2      	; 0x213a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2138:	3e c0       	rjmp	.+124    	; 0x21b6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    213a:	37 c0       	rjmp	.+110    	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    213c:	2b 81       	ldd	r18, Y+3	; 0x03
    213e:	3c 81       	ldd	r19, Y+4	; 0x04
    2140:	2c 30       	cpi	r18, 0x0C	; 12
    2142:	31 05       	cpc	r19, r1
    2144:	09 f4       	brne	.+2      	; 0x2148 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2146:	46 c0       	rjmp	.+140    	; 0x21d4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	8d 30       	cpi	r24, 0x0D	; 13
    214e:	91 05       	cpc	r25, r1
    2150:	5c f4       	brge	.+22     	; 0x2168 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2152:	2b 81       	ldd	r18, Y+3	; 0x03
    2154:	3c 81       	ldd	r19, Y+4	; 0x04
    2156:	2a 30       	cpi	r18, 0x0A	; 10
    2158:	31 05       	cpc	r19, r1
    215a:	b1 f1       	breq	.+108    	; 0x21c8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	8b 30       	cpi	r24, 0x0B	; 11
    2162:	91 05       	cpc	r25, r1
    2164:	a4 f5       	brge	.+104    	; 0x21ce <KEYPAD_4x4_adjustKeyNumber+0x118>
    2166:	2d c0       	rjmp	.+90     	; 0x21c2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2168:	2b 81       	ldd	r18, Y+3	; 0x03
    216a:	3c 81       	ldd	r19, Y+4	; 0x04
    216c:	2e 30       	cpi	r18, 0x0E	; 14
    216e:	31 05       	cpc	r19, r1
    2170:	b9 f1       	breq	.+110    	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	8e 30       	cpi	r24, 0x0E	; 14
    2178:	91 05       	cpc	r25, r1
    217a:	7c f1       	brlt	.+94     	; 0x21da <KEYPAD_4x4_adjustKeyNumber+0x124>
    217c:	2b 81       	ldd	r18, Y+3	; 0x03
    217e:	3c 81       	ldd	r19, Y+4	; 0x04
    2180:	2f 30       	cpi	r18, 0x0F	; 15
    2182:	31 05       	cpc	r19, r1
    2184:	79 f1       	breq	.+94     	; 0x21e4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	80 31       	cpi	r24, 0x10	; 16
    218c:	91 05       	cpc	r25, r1
    218e:	69 f1       	breq	.+90     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x134>
    2190:	2f c0       	rjmp	.+94     	; 0x21f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2192:	87 e0       	ldi	r24, 0x07	; 7
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	2e c0       	rjmp	.+92     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2198:	88 e0       	ldi	r24, 0x08	; 8
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	2b c0       	rjmp	.+86     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    219e:	89 e0       	ldi	r24, 0x09	; 9
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	28 c0       	rjmp	.+80     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21a4:	85 e2       	ldi	r24, 0x25	; 37
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	25 c0       	rjmp	.+74     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    21aa:	84 e0       	ldi	r24, 0x04	; 4
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	22 c0       	rjmp	.+68     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    21b0:	85 e0       	ldi	r24, 0x05	; 5
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	1f c0       	rjmp	.+62     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    21b6:	86 e0       	ldi	r24, 0x06	; 6
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	1c c0       	rjmp	.+56     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21bc:	8a e2       	ldi	r24, 0x2A	; 42
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	19 c0       	rjmp	.+50     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	16 c0       	rjmp	.+44     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	13 c0       	rjmp	.+38     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	10 c0       	rjmp	.+32     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    21d4:	8d e2       	ldi	r24, 0x2D	; 45
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	0d c0       	rjmp	.+26     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    21da:	8d e0       	ldi	r24, 0x0D	; 13
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	0a c0       	rjmp	.+20     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    21e0:	19 82       	std	Y+1, r1	; 0x01
    21e2:	08 c0       	rjmp	.+16     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    21e4:	8d e3       	ldi	r24, 0x3D	; 61
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    21ea:	8b e2       	ldi	r24, 0x2B	; 43
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	2e 97       	sbiw	r28, 0x0e	; 14
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	63 e0       	ldi	r22, 0x03	; 3
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	64 e0       	ldi	r22, 0x04	; 4
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 ea       	ldi	r26, 0xA0	; 160
    2232:	b1 e4       	ldi	r27, 0x41	; 65
    2234:	8b 87       	std	Y+11, r24	; 0x0b
    2236:	9c 87       	std	Y+12, r25	; 0x0c
    2238:	ad 87       	std	Y+13, r26	; 0x0d
    223a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	6b 85       	ldd	r22, Y+11	; 0x0b
    223e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2240:	8d 85       	ldd	r24, Y+13	; 0x0d
    2242:	9e 85       	ldd	r25, Y+14	; 0x0e
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a ef       	ldi	r20, 0xFA	; 250
    224a:	54 e4       	ldi	r21, 0x44	; 68
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8f 83       	std	Y+7, r24	; 0x07
    2256:	98 87       	std	Y+8, r25	; 0x08
    2258:	a9 87       	std	Y+9, r26	; 0x09
    225a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <LCD_init+0x7a>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <LCD_init+0xf8>
	else if (__tmp > 65535)
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	6b 85       	ldd	r22, Y+11	; 0x0b
    2298:	7c 85       	ldd	r23, Y+12	; 0x0c
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_init+0xda>
    22c0:	88 ec       	ldi	r24, 0xC8	; 200
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_init+0xc8>
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <LCD_init+0xbc>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_init+0x104>
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	6f ef       	ldi	r22, 0xFF	; 255
    2314:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2318:	88 e3       	ldi	r24, 0x38	; 56
    231a:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    231e:	8c e0       	ldi	r24, 0x0C	; 12
    2320:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_sendCommand>
}
    232a:	2e 96       	adiw	r28, 0x0e	; 14
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	e9 97       	sbiw	r28, 0x39	; 57
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2352:	83 e0       	ldi	r24, 0x03	; 3
    2354:	63 e0       	ldi	r22, 0x03	; 3
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 e8       	ldi	r26, 0x80	; 128
    2362:	bf e3       	ldi	r27, 0x3F	; 63
    2364:	8d ab       	std	Y+53, r24	; 0x35
    2366:	9e ab       	std	Y+54, r25	; 0x36
    2368:	af ab       	std	Y+55, r26	; 0x37
    236a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	6d a9       	ldd	r22, Y+53	; 0x35
    236e:	7e a9       	ldd	r23, Y+54	; 0x36
    2370:	8f a9       	ldd	r24, Y+55	; 0x37
    2372:	98 ad       	ldd	r25, Y+56	; 0x38
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a ef       	ldi	r20, 0xFA	; 250
    237a:	54 e4       	ldi	r21, 0x44	; 68
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	89 ab       	std	Y+49, r24	; 0x31
    2386:	9a ab       	std	Y+50, r25	; 0x32
    2388:	ab ab       	std	Y+51, r26	; 0x33
    238a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    238c:	69 a9       	ldd	r22, Y+49	; 0x31
    238e:	7a a9       	ldd	r23, Y+50	; 0x32
    2390:	8b a9       	ldd	r24, Y+51	; 0x33
    2392:	9c a9       	ldd	r25, Y+52	; 0x34
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <LCD_sendCommand+0x72>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	98 ab       	std	Y+48, r25	; 0x30
    23aa:	8f a7       	std	Y+47, r24	; 0x2f
    23ac:	3f c0       	rjmp	.+126    	; 0x242c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    23ae:	69 a9       	ldd	r22, Y+49	; 0x31
    23b0:	7a a9       	ldd	r23, Y+50	; 0x32
    23b2:	8b a9       	ldd	r24, Y+51	; 0x33
    23b4:	9c a9       	ldd	r25, Y+52	; 0x34
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	57 e4       	ldi	r21, 0x47	; 71
    23be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	4c f5       	brge	.+82     	; 0x2418 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	6d a9       	ldd	r22, Y+53	; 0x35
    23c8:	7e a9       	ldd	r23, Y+54	; 0x36
    23ca:	8f a9       	ldd	r24, Y+55	; 0x37
    23cc:	98 ad       	ldd	r25, Y+56	; 0x38
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	98 ab       	std	Y+48, r25	; 0x30
    23ec:	8f a7       	std	Y+47, r24	; 0x2f
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <LCD_sendCommand+0xd2>
    23f0:	88 ec       	ldi	r24, 0xC8	; 200
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9e a7       	std	Y+46, r25	; 0x2e
    23f6:	8d a7       	std	Y+45, r24	; 0x2d
    23f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    23fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_sendCommand+0xc0>
    2400:	9e a7       	std	Y+46, r25	; 0x2e
    2402:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	8f a5       	ldd	r24, Y+47	; 0x2f
    2406:	98 a9       	ldd	r25, Y+48	; 0x30
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	98 ab       	std	Y+48, r25	; 0x30
    240c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2410:	98 a9       	ldd	r25, Y+48	; 0x30
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	69 f7       	brne	.-38     	; 0x23f0 <LCD_sendCommand+0xb4>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	69 a9       	ldd	r22, Y+49	; 0x31
    241a:	7a a9       	ldd	r23, Y+50	; 0x32
    241c:	8b a9       	ldd	r24, Y+51	; 0x33
    241e:	9c a9       	ldd	r25, Y+52	; 0x34
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	98 ab       	std	Y+48, r25	; 0x30
    242a:	8f a7       	std	Y+47, r24	; 0x2f
    242c:	8f a5       	ldd	r24, Y+47	; 0x2f
    242e:	98 a9       	ldd	r25, Y+48	; 0x30
    2430:	9c a7       	std	Y+44, r25	; 0x2c
    2432:	8b a7       	std	Y+43, r24	; 0x2b
    2434:	8b a5       	ldd	r24, Y+43	; 0x2b
    2436:	9c a5       	ldd	r25, Y+44	; 0x2c
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_sendCommand+0xfc>
    243c:	9c a7       	std	Y+44, r25	; 0x2c
    243e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	64 e0       	ldi	r22, 0x04	; 4
    2444:	41 e0       	ldi	r20, 0x01	; 1
    2446:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	a0 e8       	ldi	r26, 0x80	; 128
    2450:	bf e3       	ldi	r27, 0x3F	; 63
    2452:	8f a3       	std	Y+39, r24	; 0x27
    2454:	98 a7       	std	Y+40, r25	; 0x28
    2456:	a9 a7       	std	Y+41, r26	; 0x29
    2458:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245a:	6f a1       	ldd	r22, Y+39	; 0x27
    245c:	78 a5       	ldd	r23, Y+40	; 0x28
    245e:	89 a5       	ldd	r24, Y+41	; 0x29
    2460:	9a a5       	ldd	r25, Y+42	; 0x2a
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	8b a3       	std	Y+35, r24	; 0x23
    2474:	9c a3       	std	Y+36, r25	; 0x24
    2476:	ad a3       	std	Y+37, r26	; 0x25
    2478:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    247a:	6b a1       	ldd	r22, Y+35	; 0x23
    247c:	7c a1       	ldd	r23, Y+36	; 0x24
    247e:	8d a1       	ldd	r24, Y+37	; 0x25
    2480:	9e a1       	ldd	r25, Y+38	; 0x26
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	2c f4       	brge	.+10     	; 0x249c <LCD_sendCommand+0x160>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9a a3       	std	Y+34, r25	; 0x22
    2498:	89 a3       	std	Y+33, r24	; 0x21
    249a:	3f c0       	rjmp	.+126    	; 0x251a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    249c:	6b a1       	ldd	r22, Y+35	; 0x23
    249e:	7c a1       	ldd	r23, Y+36	; 0x24
    24a0:	8d a1       	ldd	r24, Y+37	; 0x25
    24a2:	9e a1       	ldd	r25, Y+38	; 0x26
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	3f ef       	ldi	r19, 0xFF	; 255
    24a8:	4f e7       	ldi	r20, 0x7F	; 127
    24aa:	57 e4       	ldi	r21, 0x47	; 71
    24ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b0:	18 16       	cp	r1, r24
    24b2:	4c f5       	brge	.+82     	; 0x2506 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b4:	6f a1       	ldd	r22, Y+39	; 0x27
    24b6:	78 a5       	ldd	r23, Y+40	; 0x28
    24b8:	89 a5       	ldd	r24, Y+41	; 0x29
    24ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9a a3       	std	Y+34, r25	; 0x22
    24da:	89 a3       	std	Y+33, r24	; 0x21
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <LCD_sendCommand+0x1c0>
    24de:	88 ec       	ldi	r24, 0xC8	; 200
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	98 a3       	std	Y+32, r25	; 0x20
    24e4:	8f 8f       	std	Y+31, r24	; 0x1f
    24e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e8:	98 a1       	ldd	r25, Y+32	; 0x20
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_sendCommand+0x1ae>
    24ee:	98 a3       	std	Y+32, r25	; 0x20
    24f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	89 a1       	ldd	r24, Y+33	; 0x21
    24f4:	9a a1       	ldd	r25, Y+34	; 0x22
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	9a a3       	std	Y+34, r25	; 0x22
    24fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	89 a1       	ldd	r24, Y+33	; 0x21
    24fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	69 f7       	brne	.-38     	; 0x24de <LCD_sendCommand+0x1a2>
    2504:	14 c0       	rjmp	.+40     	; 0x252e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	6b a1       	ldd	r22, Y+35	; 0x23
    2508:	7c a1       	ldd	r23, Y+36	; 0x24
    250a:	8d a1       	ldd	r24, Y+37	; 0x25
    250c:	9e a1       	ldd	r25, Y+38	; 0x26
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9a a3       	std	Y+34, r25	; 0x22
    2518:	89 a3       	std	Y+33, r24	; 0x21
    251a:	89 a1       	ldd	r24, Y+33	; 0x21
    251c:	9a a1       	ldd	r25, Y+34	; 0x22
    251e:	9e 8f       	std	Y+30, r25	; 0x1e
    2520:	8d 8f       	std	Y+29, r24	; 0x1d
    2522:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2524:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_sendCommand+0x1ea>
    252a:	9e 8f       	std	Y+30, r25	; 0x1e
    252c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	69 ad       	ldd	r22, Y+57	; 0x39
    2532:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GPIO_writePort>
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a0 e8       	ldi	r26, 0x80	; 128
    253c:	bf e3       	ldi	r27, 0x3F	; 63
    253e:	89 8f       	std	Y+25, r24	; 0x19
    2540:	9a 8f       	std	Y+26, r25	; 0x1a
    2542:	ab 8f       	std	Y+27, r26	; 0x1b
    2544:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2546:	69 8d       	ldd	r22, Y+25	; 0x19
    2548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a ef       	ldi	r20, 0xFA	; 250
    2554:	54 e4       	ldi	r21, 0x44	; 68
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8d 8b       	std	Y+21, r24	; 0x15
    2560:	9e 8b       	std	Y+22, r25	; 0x16
    2562:	af 8b       	std	Y+23, r26	; 0x17
    2564:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2566:	6d 89       	ldd	r22, Y+21	; 0x15
    2568:	7e 89       	ldd	r23, Y+22	; 0x16
    256a:	8f 89       	ldd	r24, Y+23	; 0x17
    256c:	98 8d       	ldd	r25, Y+24	; 0x18
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	2c f4       	brge	.+10     	; 0x2588 <LCD_sendCommand+0x24c>
		__ticks = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9c 8b       	std	Y+20, r25	; 0x14
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	3f c0       	rjmp	.+126    	; 0x2606 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	3f ef       	ldi	r19, 0xFF	; 255
    2594:	4f e7       	ldi	r20, 0x7F	; 127
    2596:	57 e4       	ldi	r21, 0x47	; 71
    2598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259c:	18 16       	cp	r1, r24
    259e:	4c f5       	brge	.+82     	; 0x25f2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	69 8d       	ldd	r22, Y+25	; 0x19
    25a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e2       	ldi	r20, 0x20	; 32
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	0f c0       	rjmp	.+30     	; 0x25e8 <LCD_sendCommand+0x2ac>
    25ca:	88 ec       	ldi	r24, 0xC8	; 200
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9a 8b       	std	Y+18, r25	; 0x12
    25d0:	89 8b       	std	Y+17, r24	; 0x11
    25d2:	89 89       	ldd	r24, Y+17	; 0x11
    25d4:	9a 89       	ldd	r25, Y+18	; 0x12
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_sendCommand+0x29a>
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	9c 8b       	std	Y+20, r25	; 0x14
    25e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	69 f7       	brne	.-38     	; 0x25ca <LCD_sendCommand+0x28e>
    25f0:	14 c0       	rjmp	.+40     	; 0x261a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f2:	6d 89       	ldd	r22, Y+21	; 0x15
    25f4:	7e 89       	ldd	r23, Y+22	; 0x16
    25f6:	8f 89       	ldd	r24, Y+23	; 0x17
    25f8:	98 8d       	ldd	r25, Y+24	; 0x18
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	98 8b       	std	Y+16, r25	; 0x10
    260c:	8f 87       	std	Y+15, r24	; 0x0f
    260e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2610:	98 89       	ldd	r25, Y+16	; 0x10
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <LCD_sendCommand+0x2d6>
    2616:	98 8b       	std	Y+16, r25	; 0x10
    2618:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	64 e0       	ldi	r22, 0x04	; 4
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	8b 87       	std	Y+11, r24	; 0x0b
    262e:	9c 87       	std	Y+12, r25	; 0x0c
    2630:	ad 87       	std	Y+13, r26	; 0x0d
    2632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6b 85       	ldd	r22, Y+11	; 0x0b
    2636:	7c 85       	ldd	r23, Y+12	; 0x0c
    2638:	8d 85       	ldd	r24, Y+13	; 0x0d
    263a:	9e 85       	ldd	r25, Y+14	; 0x0e
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a ef       	ldi	r20, 0xFA	; 250
    2642:	54 e4       	ldi	r21, 0x44	; 68
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8f 83       	std	Y+7, r24	; 0x07
    264e:	98 87       	std	Y+8, r25	; 0x08
    2650:	a9 87       	std	Y+9, r26	; 0x09
    2652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_sendCommand+0x33a>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_sendCommand+0x39a>
    26b8:	88 ec       	ldi	r24, 0xC8	; 200
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_sendCommand+0x388>
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_sendCommand+0x37c>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_sendCommand+0x3c4>
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2708:	e9 96       	adiw	r28, 0x39	; 57
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	e9 97       	sbiw	r28, 0x39	; 57
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	63 e0       	ldi	r22, 0x03	; 3
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a0 e8       	ldi	r26, 0x80	; 128
    2740:	bf e3       	ldi	r27, 0x3F	; 63
    2742:	8d ab       	std	Y+53, r24	; 0x35
    2744:	9e ab       	std	Y+54, r25	; 0x36
    2746:	af ab       	std	Y+55, r26	; 0x37
    2748:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	6d a9       	ldd	r22, Y+53	; 0x35
    274c:	7e a9       	ldd	r23, Y+54	; 0x36
    274e:	8f a9       	ldd	r24, Y+55	; 0x37
    2750:	98 ad       	ldd	r25, Y+56	; 0x38
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a ef       	ldi	r20, 0xFA	; 250
    2758:	54 e4       	ldi	r21, 0x44	; 68
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	89 ab       	std	Y+49, r24	; 0x31
    2764:	9a ab       	std	Y+50, r25	; 0x32
    2766:	ab ab       	std	Y+51, r26	; 0x33
    2768:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    276a:	69 a9       	ldd	r22, Y+49	; 0x31
    276c:	7a a9       	ldd	r23, Y+50	; 0x32
    276e:	8b a9       	ldd	r24, Y+51	; 0x33
    2770:	9c a9       	ldd	r25, Y+52	; 0x34
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	98 ab       	std	Y+48, r25	; 0x30
    2788:	8f a7       	std	Y+47, r24	; 0x2f
    278a:	3f c0       	rjmp	.+126    	; 0x280a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    278c:	69 a9       	ldd	r22, Y+49	; 0x31
    278e:	7a a9       	ldd	r23, Y+50	; 0x32
    2790:	8b a9       	ldd	r24, Y+51	; 0x33
    2792:	9c a9       	ldd	r25, Y+52	; 0x34
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	6d a9       	ldd	r22, Y+53	; 0x35
    27a6:	7e a9       	ldd	r23, Y+54	; 0x36
    27a8:	8f a9       	ldd	r24, Y+55	; 0x37
    27aa:	98 ad       	ldd	r25, Y+56	; 0x38
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	98 ab       	std	Y+48, r25	; 0x30
    27ca:	8f a7       	std	Y+47, r24	; 0x2f
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <LCD_displayCharacter+0xd2>
    27ce:	88 ec       	ldi	r24, 0xC8	; 200
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9e a7       	std	Y+46, r25	; 0x2e
    27d4:	8d a7       	std	Y+45, r24	; 0x2d
    27d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    27d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_displayCharacter+0xc0>
    27de:	9e a7       	std	Y+46, r25	; 0x2e
    27e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e4:	98 a9       	ldd	r25, Y+48	; 0x30
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	98 ab       	std	Y+48, r25	; 0x30
    27ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ee:	98 a9       	ldd	r25, Y+48	; 0x30
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <LCD_displayCharacter+0xb4>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	69 a9       	ldd	r22, Y+49	; 0x31
    27f8:	7a a9       	ldd	r23, Y+50	; 0x32
    27fa:	8b a9       	ldd	r24, Y+51	; 0x33
    27fc:	9c a9       	ldd	r25, Y+52	; 0x34
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	98 ab       	std	Y+48, r25	; 0x30
    2808:	8f a7       	std	Y+47, r24	; 0x2f
    280a:	8f a5       	ldd	r24, Y+47	; 0x2f
    280c:	98 a9       	ldd	r25, Y+48	; 0x30
    280e:	9c a7       	std	Y+44, r25	; 0x2c
    2810:	8b a7       	std	Y+43, r24	; 0x2b
    2812:	8b a5       	ldd	r24, Y+43	; 0x2b
    2814:	9c a5       	ldd	r25, Y+44	; 0x2c
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_displayCharacter+0xfc>
    281a:	9c a7       	std	Y+44, r25	; 0x2c
    281c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	64 e0       	ldi	r22, 0x04	; 4
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e8       	ldi	r26, 0x80	; 128
    282e:	bf e3       	ldi	r27, 0x3F	; 63
    2830:	8f a3       	std	Y+39, r24	; 0x27
    2832:	98 a7       	std	Y+40, r25	; 0x28
    2834:	a9 a7       	std	Y+41, r26	; 0x29
    2836:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6f a1       	ldd	r22, Y+39	; 0x27
    283a:	78 a5       	ldd	r23, Y+40	; 0x28
    283c:	89 a5       	ldd	r24, Y+41	; 0x29
    283e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8b a3       	std	Y+35, r24	; 0x23
    2852:	9c a3       	std	Y+36, r25	; 0x24
    2854:	ad a3       	std	Y+37, r26	; 0x25
    2856:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2858:	6b a1       	ldd	r22, Y+35	; 0x23
    285a:	7c a1       	ldd	r23, Y+36	; 0x24
    285c:	8d a1       	ldd	r24, Y+37	; 0x25
    285e:	9e a1       	ldd	r25, Y+38	; 0x26
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9a a3       	std	Y+34, r25	; 0x22
    2876:	89 a3       	std	Y+33, r24	; 0x21
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    287a:	6b a1       	ldd	r22, Y+35	; 0x23
    287c:	7c a1       	ldd	r23, Y+36	; 0x24
    287e:	8d a1       	ldd	r24, Y+37	; 0x25
    2880:	9e a1       	ldd	r25, Y+38	; 0x26
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6f a1       	ldd	r22, Y+39	; 0x27
    2894:	78 a5       	ldd	r23, Y+40	; 0x28
    2896:	89 a5       	ldd	r24, Y+41	; 0x29
    2898:	9a a5       	ldd	r25, Y+42	; 0x2a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <LCD_displayCharacter+0x1c0>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	98 a3       	std	Y+32, r25	; 0x20
    28c2:	8f 8f       	std	Y+31, r24	; 0x1f
    28c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c6:	98 a1       	ldd	r25, Y+32	; 0x20
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_displayCharacter+0x1ae>
    28cc:	98 a3       	std	Y+32, r25	; 0x20
    28ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	89 a1       	ldd	r24, Y+33	; 0x21
    28d2:	9a a1       	ldd	r25, Y+34	; 0x22
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9a a3       	std	Y+34, r25	; 0x22
    28d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	89 a1       	ldd	r24, Y+33	; 0x21
    28dc:	9a a1       	ldd	r25, Y+34	; 0x22
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <LCD_displayCharacter+0x1a2>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6b a1       	ldd	r22, Y+35	; 0x23
    28e6:	7c a1       	ldd	r23, Y+36	; 0x24
    28e8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ea:	9e a1       	ldd	r25, Y+38	; 0x26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9a a3       	std	Y+34, r25	; 0x22
    28f6:	89 a3       	std	Y+33, r24	; 0x21
    28f8:	89 a1       	ldd	r24, Y+33	; 0x21
    28fa:	9a a1       	ldd	r25, Y+34	; 0x22
    28fc:	9e 8f       	std	Y+30, r25	; 0x1e
    28fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2900:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2902:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_displayCharacter+0x1ea>
    2908:	9e 8f       	std	Y+30, r25	; 0x1e
    290a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	69 ad       	ldd	r22, Y+57	; 0x39
    2910:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GPIO_writePort>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 e8       	ldi	r26, 0x80	; 128
    291a:	bf e3       	ldi	r27, 0x3F	; 63
    291c:	89 8f       	std	Y+25, r24	; 0x19
    291e:	9a 8f       	std	Y+26, r25	; 0x1a
    2920:	ab 8f       	std	Y+27, r26	; 0x1b
    2922:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	69 8d       	ldd	r22, Y+25	; 0x19
    2926:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a ef       	ldi	r20, 0xFA	; 250
    2932:	54 e4       	ldi	r21, 0x44	; 68
    2934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	8d 8b       	std	Y+21, r24	; 0x15
    293e:	9e 8b       	std	Y+22, r25	; 0x16
    2940:	af 8b       	std	Y+23, r26	; 0x17
    2942:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2944:	6d 89       	ldd	r22, Y+21	; 0x15
    2946:	7e 89       	ldd	r23, Y+22	; 0x16
    2948:	8f 89       	ldd	r24, Y+23	; 0x17
    294a:	98 8d       	ldd	r25, Y+24	; 0x18
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	8b 8b       	std	Y+19, r24	; 0x13
    2964:	3f c0       	rjmp	.+126    	; 0x29e4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	3f ef       	ldi	r19, 0xFF	; 255
    2972:	4f e7       	ldi	r20, 0x7F	; 127
    2974:	57 e4       	ldi	r21, 0x47	; 71
    2976:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297a:	18 16       	cp	r1, r24
    297c:	4c f5       	brge	.+82     	; 0x29d0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	69 8d       	ldd	r22, Y+25	; 0x19
    2980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9c 8b       	std	Y+20, r25	; 0x14
    29a4:	8b 8b       	std	Y+19, r24	; 0x13
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <LCD_displayCharacter+0x2ac>
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9a 8b       	std	Y+18, r25	; 0x12
    29ae:	89 8b       	std	Y+17, r24	; 0x11
    29b0:	89 89       	ldd	r24, Y+17	; 0x11
    29b2:	9a 89       	ldd	r25, Y+18	; 0x12
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_displayCharacter+0x29a>
    29b8:	9a 8b       	std	Y+18, r25	; 0x12
    29ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8b 89       	ldd	r24, Y+19	; 0x13
    29be:	9c 89       	ldd	r25, Y+20	; 0x14
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9c 8b       	std	Y+20, r25	; 0x14
    29c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8b 89       	ldd	r24, Y+19	; 0x13
    29c8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <LCD_displayCharacter+0x28e>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	6d 89       	ldd	r22, Y+21	; 0x15
    29d2:	7e 89       	ldd	r23, Y+22	; 0x16
    29d4:	8f 89       	ldd	r24, Y+23	; 0x17
    29d6:	98 8d       	ldd	r25, Y+24	; 0x18
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
    29e4:	8b 89       	ldd	r24, Y+19	; 0x13
    29e6:	9c 89       	ldd	r25, Y+20	; 0x14
    29e8:	98 8b       	std	Y+16, r25	; 0x10
    29ea:	8f 87       	std	Y+15, r24	; 0x0f
    29ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ee:	98 89       	ldd	r25, Y+16	; 0x10
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_displayCharacter+0x2d6>
    29f4:	98 8b       	std	Y+16, r25	; 0x10
    29f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29f8:	83 e0       	ldi	r24, 0x03	; 3
    29fa:	64 e0       	ldi	r22, 0x04	; 4
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e8       	ldi	r26, 0x80	; 128
    2a08:	bf e3       	ldi	r27, 0x3F	; 63
    2a0a:	8b 87       	std	Y+11, r24	; 0x0b
    2a0c:	9c 87       	std	Y+12, r25	; 0x0c
    2a0e:	ad 87       	std	Y+13, r26	; 0x0d
    2a10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	4a ef       	ldi	r20, 0xFA	; 250
    2a20:	54 e4       	ldi	r21, 0x44	; 68
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	8f 83       	std	Y+7, r24	; 0x07
    2a2c:	98 87       	std	Y+8, r25	; 0x08
    2a2e:	a9 87       	std	Y+9, r26	; 0x09
    2a30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	5f e3       	ldi	r21, 0x3F	; 63
    2a42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a46:	88 23       	and	r24, r24
    2a48:	2c f4       	brge	.+10     	; 0x2a54 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	3f c0       	rjmp	.+126    	; 0x2ad2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	57 e4       	ldi	r21, 0x47	; 71
    2a64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	4c f5       	brge	.+82     	; 0x2abe <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e2       	ldi	r20, 0x20	; 32
    2a7a:	51 e4       	ldi	r21, 0x41	; 65
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
    2a94:	0f c0       	rjmp	.+30     	; 0x2ab4 <LCD_displayCharacter+0x39a>
    2a96:	88 ec       	ldi	r24, 0xC8	; 200
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9c 83       	std	Y+4, r25	; 0x04
    2a9c:	8b 83       	std	Y+3, r24	; 0x03
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_displayCharacter+0x388>
    2aa6:	9c 83       	std	Y+4, r25	; 0x04
    2aa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	9e 81       	ldd	r25, Y+6	; 0x06
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	9e 83       	std	Y+6, r25	; 0x06
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	69 f7       	brne	.-38     	; 0x2a96 <LCD_displayCharacter+0x37c>
    2abc:	14 c0       	rjmp	.+40     	; 0x2ae6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac0:	78 85       	ldd	r23, Y+8	; 0x08
    2ac2:	89 85       	ldd	r24, Y+9	; 0x09
    2ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	9e 83       	std	Y+6, r25	; 0x06
    2ad0:	8d 83       	std	Y+5, r24	; 0x05
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_displayCharacter+0x3c4>
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ae6:	e9 96       	adiw	r28, 0x39	; 57
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <LCD_displayString+0x6>
    2afe:	0f 92       	push	r0
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	9b 83       	std	Y+3, r25	; 0x03
    2b06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b08:	19 82       	std	Y+1, r1	; 0x01
    2b0a:	0e c0       	rjmp	.+28     	; 0x2b28 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	fc 01       	movw	r30, r24
    2b18:	e2 0f       	add	r30, r18
    2b1a:	f3 1f       	adc	r31, r19
    2b1c:	80 81       	ld	r24, Z
    2b1e:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayCharacter>
		i++;
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	8f 5f       	subi	r24, 0xFF	; 255
    2b26:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	fc 01       	movw	r30, r24
    2b34:	e2 0f       	add	r30, r18
    2b36:	f3 1f       	adc	r31, r19
    2b38:	80 81       	ld	r24, Z
    2b3a:	88 23       	and	r24, r24
    2b3c:	39 f7       	brne	.-50     	; 0x2b0c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <LCD_moveCursor+0x6>
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <LCD_moveCursor+0x8>
    2b52:	0f 92       	push	r0
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	8a 83       	std	Y+2, r24	; 0x02
    2b5a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	28 2f       	mov	r18, r24
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	3d 83       	std	Y+5, r19	; 0x05
    2b64:	2c 83       	std	Y+4, r18	; 0x04
    2b66:	8c 81       	ldd	r24, Y+4	; 0x04
    2b68:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	c1 f0       	breq	.+48     	; 0x2ba0 <LCD_moveCursor+0x56>
    2b70:	2c 81       	ldd	r18, Y+4	; 0x04
    2b72:	3d 81       	ldd	r19, Y+5	; 0x05
    2b74:	22 30       	cpi	r18, 0x02	; 2
    2b76:	31 05       	cpc	r19, r1
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <LCD_moveCursor+0x3a>
    2b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	61 f0       	breq	.+24     	; 0x2b9a <LCD_moveCursor+0x50>
    2b82:	19 c0       	rjmp	.+50     	; 0x2bb6 <LCD_moveCursor+0x6c>
    2b84:	2c 81       	ldd	r18, Y+4	; 0x04
    2b86:	3d 81       	ldd	r19, Y+5	; 0x05
    2b88:	22 30       	cpi	r18, 0x02	; 2
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	69 f0       	breq	.+26     	; 0x2ba8 <LCD_moveCursor+0x5e>
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	83 30       	cpi	r24, 0x03	; 3
    2b94:	91 05       	cpc	r25, r1
    2b96:	61 f0       	breq	.+24     	; 0x2bb0 <LCD_moveCursor+0x66>
    2b98:	0e c0       	rjmp	.+28     	; 0x2bb6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	0b c0       	rjmp	.+22     	; 0x2bb6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	80 5c       	subi	r24, 0xC0	; 192
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	07 c0       	rjmp	.+14     	; 0x2bb6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	80 5f       	subi	r24, 0xF0	; 240
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	80 5b       	subi	r24, 0xB0	; 176
    2bb4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	80 68       	ori	r24, 0x80	; 128
    2bba:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_sendCommand>
}
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <LCD_displayStringRowColumn+0x6>
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <LCD_displayStringRowColumn+0x8>
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	6a 83       	std	Y+2, r22	; 0x02
    2bde:	5c 83       	std	Y+4, r21	; 0x04
    2be0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	6a 81       	ldd	r22, Y+2	; 0x02
    2be6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	9c 81       	ldd	r25, Y+4	; 0x04
    2bee:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
}
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	08 95       	ret

00002c00 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	62 97       	sbiw	r28, 0x12	; 18
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	9a 8b       	std	Y+18, r25	; 0x12
    2c16:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c18:	89 89       	ldd	r24, Y+17	; 0x11
    2c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c1c:	9e 01       	movw	r18, r28
    2c1e:	2f 5f       	subi	r18, 0xFF	; 255
    2c20:	3f 4f       	sbci	r19, 0xFF	; 255
    2c22:	b9 01       	movw	r22, r18
    2c24:	4a e0       	ldi	r20, 0x0A	; 10
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <itoa>
   LCD_displayString(buff); /* Display the string */
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayString>
}
    2c34:	62 96       	adiw	r28, 0x12	; 18
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_sendCommand>
}
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    2c5a:	1f 92       	push	r1
    2c5c:	0f 92       	push	r0
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	0f 92       	push	r0
    2c62:	11 24       	eor	r1, r1
    2c64:	2f 93       	push	r18
    2c66:	3f 93       	push	r19
    2c68:	4f 93       	push	r20
    2c6a:	5f 93       	push	r21
    2c6c:	6f 93       	push	r22
    2c6e:	7f 93       	push	r23
    2c70:	8f 93       	push	r24
    2c72:	9f 93       	push	r25
    2c74:	af 93       	push	r26
    2c76:	bf 93       	push	r27
    2c78:	ef 93       	push	r30
    2c7a:	ff 93       	push	r31
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2c84:	80 91 7d 01 	lds	r24, 0x017D
    2c88:	90 91 7e 01 	lds	r25, 0x017E
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	29 f0       	breq	.+10     	; 0x2c9a <__vector_7+0x40>
	{
		(*g_callBackPtr)();/* Call the Call Back function*/
    2c90:	e0 91 7d 01 	lds	r30, 0x017D
    2c94:	f0 91 7e 01 	lds	r31, 0x017E
    2c98:	09 95       	icall
	}
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	ff 91       	pop	r31
    2ca0:	ef 91       	pop	r30
    2ca2:	bf 91       	pop	r27
    2ca4:	af 91       	pop	r26
    2ca6:	9f 91       	pop	r25
    2ca8:	8f 91       	pop	r24
    2caa:	7f 91       	pop	r23
    2cac:	6f 91       	pop	r22
    2cae:	5f 91       	pop	r21
    2cb0:	4f 91       	pop	r20
    2cb2:	3f 91       	pop	r19
    2cb4:	2f 91       	pop	r18
    2cb6:	0f 90       	pop	r0
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	0f 90       	pop	r0
    2cbc:	1f 90       	pop	r1
    2cbe:	18 95       	reti

00002cc0 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    2cc0:	1f 92       	push	r1
    2cc2:	0f 92       	push	r0
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	0f 92       	push	r0
    2cc8:	11 24       	eor	r1, r1
    2cca:	2f 93       	push	r18
    2ccc:	3f 93       	push	r19
    2cce:	4f 93       	push	r20
    2cd0:	5f 93       	push	r21
    2cd2:	6f 93       	push	r22
    2cd4:	7f 93       	push	r23
    2cd6:	8f 93       	push	r24
    2cd8:	9f 93       	push	r25
    2cda:	af 93       	push	r26
    2cdc:	bf 93       	push	r27
    2cde:	ef 93       	push	r30
    2ce0:	ff 93       	push	r31
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2cea:	80 91 7d 01 	lds	r24, 0x017D
    2cee:	90 91 7e 01 	lds	r25, 0x017E
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	29 f0       	breq	.+10     	; 0x2d00 <__vector_9+0x40>
	{
		(*g_callBackPtr)();/* Call the Call Back function*/
    2cf6:	e0 91 7d 01 	lds	r30, 0x017D
    2cfa:	f0 91 7e 01 	lds	r31, 0x017E
    2cfe:	09 95       	icall
	}
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	ff 91       	pop	r31
    2d06:	ef 91       	pop	r30
    2d08:	bf 91       	pop	r27
    2d0a:	af 91       	pop	r26
    2d0c:	9f 91       	pop	r25
    2d0e:	8f 91       	pop	r24
    2d10:	7f 91       	pop	r23
    2d12:	6f 91       	pop	r22
    2d14:	5f 91       	pop	r21
    2d16:	4f 91       	pop	r20
    2d18:	3f 91       	pop	r19
    2d1a:	2f 91       	pop	r18
    2d1c:	0f 90       	pop	r0
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	0f 90       	pop	r0
    2d22:	1f 90       	pop	r1
    2d24:	18 95       	reti

00002d26 <Timer1_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <Timer1_init+0x6>
    2d2c:	0f 92       	push	r0
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	9a 83       	std	Y+2, r25	; 0x02
    2d34:	89 83       	std	Y+1, r24	; 0x01
	/* set this bit for non-PWM mode and clear all the other bits*/
	TCCR1A = (1 << FOC1A);
    2d36:	ef e4       	ldi	r30, 0x4F	; 79
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	88 e0       	ldi	r24, 0x08	; 8
    2d3c:	80 83       	st	Z, r24

	/*insert the pre-scaler bits in CS12 CS11 CS10
	 *and insert bit mode in WGM12(0-->normal mode & 1-->compare mode with clearing WGM13 11 10)
	 *and clear all the other bits*/
	TCCR1B=(TCCR1B &0)|(Config_Ptr->prescaler |Config_Ptr->mode <<3);
    2d3e:	ee e4       	ldi	r30, 0x4E	; 78
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	ae e4       	ldi	r26, 0x4E	; 78
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4c:	84 81       	ldd	r24, Z+4	; 0x04
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	e9 81       	ldd	r30, Y+1	; 0x01
    2d54:	fa 81       	ldd	r31, Y+2	; 0x02
    2d56:	85 81       	ldd	r24, Z+5	; 0x05
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	82 2b       	or	r24, r18
    2d6a:	93 2b       	or	r25, r19
    2d6c:	8c 93       	st	X, r24

	/*set the initial value*/
	TCNT1=Config_Ptr->initial_value;
    2d6e:	ac e4       	ldi	r26, 0x4C	; 76
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e9 81       	ldd	r30, Y+1	; 0x01
    2d74:	fa 81       	ldd	r31, Y+2	; 0x02
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	11 96       	adiw	r26, 0x01	; 1
    2d7c:	9c 93       	st	X, r25
    2d7e:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==CompareMode)
    2d80:	e9 81       	ldd	r30, Y+1	; 0x01
    2d82:	fa 81       	ldd	r31, Y+2	; 0x02
    2d84:	85 81       	ldd	r24, Z+5	; 0x05
    2d86:	81 30       	cpi	r24, 0x01	; 1
    2d88:	89 f4       	brne	.+34     	; 0x2dac <Timer1_init+0x86>
	{
		/*set the compare value*/
		OCR1A=Config_Ptr->compare_value;
    2d8a:	aa e4       	ldi	r26, 0x4A	; 74
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d90:	fa 81       	ldd	r31, Y+2	; 0x02
    2d92:	82 81       	ldd	r24, Z+2	; 0x02
    2d94:	93 81       	ldd	r25, Z+3	; 0x03
    2d96:	11 96       	adiw	r26, 0x01	; 1
    2d98:	9c 93       	st	X, r25
    2d9a:	8e 93       	st	-X, r24

		/*enable compare match interrupt*/
		SET_BIT(TIMSK,OCIE1A);
    2d9c:	a9 e5       	ldi	r26, 0x59	; 89
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e9 e5       	ldi	r30, 0x59	; 89
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	80 61       	ori	r24, 0x10	; 16
    2da8:	8c 93       	st	X, r24
    2daa:	0c c0       	rjmp	.+24     	; 0x2dc4 <Timer1_init+0x9e>
	}
	else if(Config_Ptr->mode==NormalMode)
    2dac:	e9 81       	ldd	r30, Y+1	; 0x01
    2dae:	fa 81       	ldd	r31, Y+2	; 0x02
    2db0:	85 81       	ldd	r24, Z+5	; 0x05
    2db2:	88 23       	and	r24, r24
    2db4:	39 f4       	brne	.+14     	; 0x2dc4 <Timer1_init+0x9e>
	{
		/*enable overflow interrupt*/
		SET_BIT(TIMSK,TOIE1);
    2db6:	a9 e5       	ldi	r26, 0x59	; 89
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e9 e5       	ldi	r30, 0x59	; 89
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	84 60       	ori	r24, 0x04	; 4
    2dc2:	8c 93       	st	X, r24
	}

}
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2dd8:	ef e4       	ldi	r30, 0x4F	; 79
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	10 82       	st	Z, r1
	TCCR1B = 0;
    2dde:	ee e4       	ldi	r30, 0x4E	; 78
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	10 82       	st	Z, r1
	TCNT1 = 0;
    2de4:	ec e4       	ldi	r30, 0x4C	; 76
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	11 82       	std	Z+1, r1	; 0x01
    2dea:	10 82       	st	Z, r1
	ICR1 = 0;
    2dec:	e6 e4       	ldi	r30, 0x46	; 70
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	11 82       	std	Z+1, r1	; 0x01
    2df2:	10 82       	st	Z, r1
	TIMSK =0;
    2df4:	e9 e5       	ldi	r30, 0x59	; 89
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	10 82       	st	Z, r1

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2dfa:	10 92 7e 01 	sts	0x017E, r1
    2dfe:	10 92 7d 01 	sts	0x017D, r1
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <Timer1_setCallBack+0x6>
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	90 93 7e 01 	sts	0x017E, r25
    2e1e:	80 93 7d 01 	sts	0x017D, r24
}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <UART_init+0x6>
    2e32:	00 d0       	rcall	.+0      	; 0x2e34 <UART_init+0x8>
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	9c 83       	std	Y+4, r25	; 0x04
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2e3c:	1a 82       	std	Y+2, r1	; 0x02
    2e3e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e40:	eb e2       	ldi	r30, 0x2B	; 43
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	80 83       	st	Z, r24

	/*enable the transmitter and the reciever */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2e48:	aa e2       	ldi	r26, 0x2A	; 42
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	ea e2       	ldi	r30, 0x2A	; 42
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	88 61       	ori	r24, 0x18	; 24
    2e54:	8c 93       	st	X, r24

	/*insert the character size bit in UCSZ2 */
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data &0x04);
    2e56:	aa e2       	ldi	r26, 0x2A	; 42
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	ea e2       	ldi	r30, 0x2A	; 42
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	98 2f       	mov	r25, r24
    2e62:	9b 7f       	andi	r25, 0xFB	; 251
    2e64:	eb 81       	ldd	r30, Y+3	; 0x03
    2e66:	fc 81       	ldd	r31, Y+4	; 0x04
    2e68:	80 81       	ld	r24, Z
    2e6a:	84 70       	andi	r24, 0x04	; 4
    2e6c:	89 2b       	or	r24, r25
    2e6e:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    2e70:	a0 e4       	ldi	r26, 0x40	; 64
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	e0 e4       	ldi	r30, 0x40	; 64
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	80 68       	ori	r24, 0x80	; 128
    2e7c:	8c 93       	st	X, r24

	/*insert the character size bits in UCSZ1 and UCSZ0*/
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data &0x03)<<1);
    2e7e:	a0 e4       	ldi	r26, 0x40	; 64
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e0 e4       	ldi	r30, 0x40	; 64
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	28 2f       	mov	r18, r24
    2e8a:	29 7f       	andi	r18, 0xF9	; 249
    2e8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e90:	80 81       	ld	r24, Z
    2e92:	88 2f       	mov	r24, r24
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	83 70       	andi	r24, 0x03	; 3
    2e98:	90 70       	andi	r25, 0x00	; 0
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	82 2b       	or	r24, r18
    2ea0:	8c 93       	st	X, r24

	/*insert the parity mode bits in UPM1 and UPM0*/
	UCSRC=(UCSRC&0xCF)|(Config_Ptr->parity <<4);
    2ea2:	a0 e4       	ldi	r26, 0x40	; 64
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e0 e4       	ldi	r30, 0x40	; 64
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	28 2f       	mov	r18, r24
    2eae:	2f 7c       	andi	r18, 0xCF	; 207
    2eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb4:	81 81       	ldd	r24, Z+1	; 0x01
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	82 95       	swap	r24
    2ebc:	92 95       	swap	r25
    2ebe:	90 7f       	andi	r25, 0xF0	; 240
    2ec0:	98 27       	eor	r25, r24
    2ec2:	80 7f       	andi	r24, 0xF0	; 240
    2ec4:	98 27       	eor	r25, r24
    2ec6:	82 2b       	or	r24, r18
    2ec8:	8c 93       	st	X, r24

	/*insert number of stop bits in USBS*/
	UCSRC=(UCSRC&0xF7)|(Config_Ptr->stop_bit <<3);
    2eca:	a0 e4       	ldi	r26, 0x40	; 64
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e0 e4       	ldi	r30, 0x40	; 64
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	27 7f       	andi	r18, 0xF7	; 247
    2ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eda:	fc 81       	ldd	r31, Y+4	; 0x04
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	88 2f       	mov	r24, r24
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	88 0f       	add	r24, r24
    2ee8:	99 1f       	adc	r25, r25
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	82 2b       	or	r24, r18
    2ef0:	8c 93       	st	X, r24
	
	if(Config_Ptr->bit_data ==Nine_Bits)
    2ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef6:	80 81       	ld	r24, Z
    2ef8:	87 30       	cpi	r24, 0x07	; 7
    2efa:	39 f4       	brne	.+14     	; 0x2f0a <UART_init+0xde>
	{
		/*Enable reception and transmission of 9-bit serial data*/
		UCSRB |= (1<<RXB8)|(1<<TXB8);
    2efc:	aa e2       	ldi	r26, 0x2A	; 42
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	ea e2       	ldi	r30, 0x2A	; 42
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	83 60       	ori	r24, 0x03	; 3
    2f08:	8c 93       	st	X, r24
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->UART_BaudRate * 8UL))) - 1);
    2f0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f0e:	83 81       	ldd	r24, Z+3	; 0x03
    2f10:	94 81       	ldd	r25, Z+4	; 0x04
    2f12:	a5 81       	ldd	r26, Z+5	; 0x05
    2f14:	b6 81       	ldd	r27, Z+6	; 0x06
    2f16:	88 0f       	add	r24, r24
    2f18:	99 1f       	adc	r25, r25
    2f1a:	aa 1f       	adc	r26, r26
    2f1c:	bb 1f       	adc	r27, r27
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	aa 1f       	adc	r26, r26
    2f24:	bb 1f       	adc	r27, r27
    2f26:	88 0f       	add	r24, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	aa 1f       	adc	r26, r26
    2f2c:	bb 1f       	adc	r27, r27
    2f2e:	9c 01       	movw	r18, r24
    2f30:	ad 01       	movw	r20, r26
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	92 e1       	ldi	r25, 0x12	; 18
    2f36:	aa e7       	ldi	r26, 0x7A	; 122
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodsi4>
    2f42:	da 01       	movw	r26, r20
    2f44:	c9 01       	movw	r24, r18
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f4c:	e0 e4       	ldi	r30, 0x40	; 64
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	89 2f       	mov	r24, r25
    2f56:	99 27       	eor	r25, r25
    2f58:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f5a:	e9 e2       	ldi	r30, 0x29	; 41
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	80 83       	st	Z, r24
}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	0f 92       	push	r0
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f7c:	eb e2       	ldi	r30, 0x2B	; 43
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	80 72       	andi	r24, 0x20	; 32
    2f88:	90 70       	andi	r25, 0x00	; 0
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	b9 f3       	breq	.-18     	; 0x2f7c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f8e:	ec e2       	ldi	r30, 0x2C	; 44
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2f96:	0f 90       	pop	r0
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2fa6:	eb e2       	ldi	r30, 0x2B	; 43
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	88 23       	and	r24, r24
    2fae:	dc f7       	brge	.-10     	; 0x2fa6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2fb0:	ec e2       	ldi	r30, 0x2C	; 44
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
}
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <UART_sendString+0x6>
    2fc2:	0f 92       	push	r0
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	9b 83       	std	Y+3, r25	; 0x03
    2fca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fcc:	19 82       	std	Y+1, r1	; 0x01
    2fce:	0e c0       	rjmp	.+28     	; 0x2fec <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	fc 01       	movw	r30, r24
    2fdc:	e2 0f       	add	r30, r18
    2fde:	f3 1f       	adc	r31, r19
    2fe0:	80 81       	ld	r24, Z
    2fe2:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <UART_sendByte>
		i++;
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	8f 5f       	subi	r24, 0xFF	; 255
    2fea:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	80 81       	ld	r24, Z
    2ffe:	88 23       	and	r24, r24
    3000:	39 f7       	brne	.-50     	; 0x2fd0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <UART_sendArray>:
void UART_sendArray(const uint8*arr,uint8 size)
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	00 d0       	rcall	.+0      	; 0x3014 <UART_sendArray+0x6>
    3014:	00 d0       	rcall	.+0      	; 0x3016 <UART_sendArray+0x8>
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	9b 83       	std	Y+3, r25	; 0x03
    301c:	8a 83       	std	Y+2, r24	; 0x02
    301e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    3020:	19 82       	std	Y+1, r1	; 0x01
    3022:	0e c0       	rjmp	.+28     	; 0x3040 <UART_sendArray+0x32>
	{
		UART_sendByte(arr[i]);
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	9b 81       	ldd	r25, Y+3	; 0x03
    302e:	fc 01       	movw	r30, r24
    3030:	e2 0f       	add	r30, r18
    3032:	f3 1f       	adc	r31, r19
    3034:	80 81       	ld	r24, Z
    3036:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <UART_sendByte>
	*******************************************************************/
}
void UART_sendArray(const uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	8f 5f       	subi	r24, 0xFF	; 255
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	99 81       	ldd	r25, Y+1	; 0x01
    3042:	8c 81       	ldd	r24, Y+4	; 0x04
    3044:	98 17       	cp	r25, r24
    3046:	70 f3       	brcs	.-36     	; 0x3024 <UART_sendArray+0x16>
	{
		UART_sendByte(arr[i]);
	}
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <UART_receiveString+0xa>
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	9b 83       	std	Y+3, r25	; 0x03
    3068:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    306a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	8c 01       	movw	r16, r24
    3078:	02 0f       	add	r16, r18
    307a:	13 1f       	adc	r17, r19
    307c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <UART_recieveByte>
    3080:	f8 01       	movw	r30, r16
    3082:	80 83       	st	Z, r24
    3084:	0f c0       	rjmp	.+30     	; 0x30a4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	8f 5f       	subi	r24, 0xFF	; 255
    308a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	9b 81       	ldd	r25, Y+3	; 0x03
    3096:	8c 01       	movw	r16, r24
    3098:	02 0f       	add	r16, r18
    309a:	13 1f       	adc	r17, r19
    309c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <UART_recieveByte>
    30a0:	f8 01       	movw	r30, r16
    30a2:	80 83       	st	Z, r24

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	fc 01       	movw	r30, r24
    30b0:	e2 0f       	add	r30, r18
    30b2:	f3 1f       	adc	r31, r19
    30b4:	80 81       	ld	r24, Z
    30b6:	83 32       	cpi	r24, 0x23	; 35
    30b8:	31 f7       	brne	.-52     	; 0x3086 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	28 2f       	mov	r18, r24
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
    30c2:	9b 81       	ldd	r25, Y+3	; 0x03
    30c4:	fc 01       	movw	r30, r24
    30c6:	e2 0f       	add	r30, r18
    30c8:	f3 1f       	adc	r31, r19
    30ca:	10 82       	st	Z, r1
}
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	1f 91       	pop	r17
    30d8:	0f 91       	pop	r16
    30da:	08 95       	ret

000030dc <UART_receiveArray>:
void UART_receiveArray(uint8*arr,uint8 size)
{
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <UART_receiveArray+0xa>
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <UART_receiveArray+0xc>
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	9b 83       	std	Y+3, r25	; 0x03
    30ee:	8a 83       	std	Y+2, r24	; 0x02
    30f0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    30f2:	19 82       	std	Y+1, r1	; 0x01
    30f4:	0f c0       	rjmp	.+30     	; 0x3114 <UART_receiveArray+0x38>
	{
		arr[i]=UART_recieveByte();
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	28 2f       	mov	r18, r24
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	8c 01       	movw	r16, r24
    3102:	02 0f       	add	r16, r18
    3104:	13 1f       	adc	r17, r19
    3106:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <UART_recieveByte>
    310a:	f8 01       	movw	r30, r16
    310c:	80 83       	st	Z, r24
	Str[i] = '\0';
}
void UART_receiveArray(uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	8f 5f       	subi	r24, 0xFF	; 255
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	99 81       	ldd	r25, Y+1	; 0x01
    3116:	8c 81       	ldd	r24, Y+4	; 0x04
    3118:	98 17       	cp	r25, r24
    311a:	68 f3       	brcs	.-38     	; 0x30f6 <UART_receiveArray+0x1a>
	{
		arr[i]=UART_recieveByte();
	}

}
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	08 95       	ret

0000312e <__udivmodsi4>:
    312e:	a1 e2       	ldi	r26, 0x21	; 33
    3130:	1a 2e       	mov	r1, r26
    3132:	aa 1b       	sub	r26, r26
    3134:	bb 1b       	sub	r27, r27
    3136:	fd 01       	movw	r30, r26
    3138:	0d c0       	rjmp	.+26     	; 0x3154 <__udivmodsi4_ep>

0000313a <__udivmodsi4_loop>:
    313a:	aa 1f       	adc	r26, r26
    313c:	bb 1f       	adc	r27, r27
    313e:	ee 1f       	adc	r30, r30
    3140:	ff 1f       	adc	r31, r31
    3142:	a2 17       	cp	r26, r18
    3144:	b3 07       	cpc	r27, r19
    3146:	e4 07       	cpc	r30, r20
    3148:	f5 07       	cpc	r31, r21
    314a:	20 f0       	brcs	.+8      	; 0x3154 <__udivmodsi4_ep>
    314c:	a2 1b       	sub	r26, r18
    314e:	b3 0b       	sbc	r27, r19
    3150:	e4 0b       	sbc	r30, r20
    3152:	f5 0b       	sbc	r31, r21

00003154 <__udivmodsi4_ep>:
    3154:	66 1f       	adc	r22, r22
    3156:	77 1f       	adc	r23, r23
    3158:	88 1f       	adc	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	1a 94       	dec	r1
    315e:	69 f7       	brne	.-38     	; 0x313a <__udivmodsi4_loop>
    3160:	60 95       	com	r22
    3162:	70 95       	com	r23
    3164:	80 95       	com	r24
    3166:	90 95       	com	r25
    3168:	9b 01       	movw	r18, r22
    316a:	ac 01       	movw	r20, r24
    316c:	bd 01       	movw	r22, r26
    316e:	cf 01       	movw	r24, r30
    3170:	08 95       	ret

00003172 <__prologue_saves__>:
    3172:	2f 92       	push	r2
    3174:	3f 92       	push	r3
    3176:	4f 92       	push	r4
    3178:	5f 92       	push	r5
    317a:	6f 92       	push	r6
    317c:	7f 92       	push	r7
    317e:	8f 92       	push	r8
    3180:	9f 92       	push	r9
    3182:	af 92       	push	r10
    3184:	bf 92       	push	r11
    3186:	cf 92       	push	r12
    3188:	df 92       	push	r13
    318a:	ef 92       	push	r14
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	ca 1b       	sub	r28, r26
    319c:	db 0b       	sbc	r29, r27
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	f8 94       	cli
    31a2:	de bf       	out	0x3e, r29	; 62
    31a4:	0f be       	out	0x3f, r0	; 63
    31a6:	cd bf       	out	0x3d, r28	; 61
    31a8:	09 94       	ijmp

000031aa <__epilogue_restores__>:
    31aa:	2a 88       	ldd	r2, Y+18	; 0x12
    31ac:	39 88       	ldd	r3, Y+17	; 0x11
    31ae:	48 88       	ldd	r4, Y+16	; 0x10
    31b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    31b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    31b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    31b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    31b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    31bc:	b9 84       	ldd	r11, Y+9	; 0x09
    31be:	c8 84       	ldd	r12, Y+8	; 0x08
    31c0:	df 80       	ldd	r13, Y+7	; 0x07
    31c2:	ee 80       	ldd	r14, Y+6	; 0x06
    31c4:	fd 80       	ldd	r15, Y+5	; 0x05
    31c6:	0c 81       	ldd	r16, Y+4	; 0x04
    31c8:	1b 81       	ldd	r17, Y+3	; 0x03
    31ca:	aa 81       	ldd	r26, Y+2	; 0x02
    31cc:	b9 81       	ldd	r27, Y+1	; 0x01
    31ce:	ce 0f       	add	r28, r30
    31d0:	d1 1d       	adc	r29, r1
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	f8 94       	cli
    31d6:	de bf       	out	0x3e, r29	; 62
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	ed 01       	movw	r28, r26
    31de:	08 95       	ret

000031e0 <itoa>:
    31e0:	fb 01       	movw	r30, r22
    31e2:	9f 01       	movw	r18, r30
    31e4:	e8 94       	clt
    31e6:	42 30       	cpi	r20, 0x02	; 2
    31e8:	c4 f0       	brlt	.+48     	; 0x321a <itoa+0x3a>
    31ea:	45 32       	cpi	r20, 0x25	; 37
    31ec:	b4 f4       	brge	.+44     	; 0x321a <itoa+0x3a>
    31ee:	4a 30       	cpi	r20, 0x0A	; 10
    31f0:	29 f4       	brne	.+10     	; 0x31fc <itoa+0x1c>
    31f2:	97 fb       	bst	r25, 7
    31f4:	1e f4       	brtc	.+6      	; 0x31fc <itoa+0x1c>
    31f6:	90 95       	com	r25
    31f8:	81 95       	neg	r24
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	64 2f       	mov	r22, r20
    31fe:	77 27       	eor	r23, r23
    3200:	0e 94 21 19 	call	0x3242	; 0x3242 <__udivmodhi4>
    3204:	80 5d       	subi	r24, 0xD0	; 208
    3206:	8a 33       	cpi	r24, 0x3A	; 58
    3208:	0c f0       	brlt	.+2      	; 0x320c <itoa+0x2c>
    320a:	89 5d       	subi	r24, 0xD9	; 217
    320c:	81 93       	st	Z+, r24
    320e:	cb 01       	movw	r24, r22
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	a1 f7       	brne	.-24     	; 0x31fc <itoa+0x1c>
    3214:	16 f4       	brtc	.+4      	; 0x321a <itoa+0x3a>
    3216:	5d e2       	ldi	r21, 0x2D	; 45
    3218:	51 93       	st	Z+, r21
    321a:	10 82       	st	Z, r1
    321c:	c9 01       	movw	r24, r18
    321e:	0c 94 11 19 	jmp	0x3222	; 0x3222 <strrev>

00003222 <strrev>:
    3222:	dc 01       	movw	r26, r24
    3224:	fc 01       	movw	r30, r24
    3226:	67 2f       	mov	r22, r23
    3228:	71 91       	ld	r23, Z+
    322a:	77 23       	and	r23, r23
    322c:	e1 f7       	brne	.-8      	; 0x3226 <strrev+0x4>
    322e:	32 97       	sbiw	r30, 0x02	; 2
    3230:	04 c0       	rjmp	.+8      	; 0x323a <strrev+0x18>
    3232:	7c 91       	ld	r23, X
    3234:	6d 93       	st	X+, r22
    3236:	70 83       	st	Z, r23
    3238:	62 91       	ld	r22, -Z
    323a:	ae 17       	cp	r26, r30
    323c:	bf 07       	cpc	r27, r31
    323e:	c8 f3       	brcs	.-14     	; 0x3232 <strrev+0x10>
    3240:	08 95       	ret

00003242 <__udivmodhi4>:
    3242:	aa 1b       	sub	r26, r26
    3244:	bb 1b       	sub	r27, r27
    3246:	51 e1       	ldi	r21, 0x11	; 17
    3248:	07 c0       	rjmp	.+14     	; 0x3258 <__udivmodhi4_ep>

0000324a <__udivmodhi4_loop>:
    324a:	aa 1f       	adc	r26, r26
    324c:	bb 1f       	adc	r27, r27
    324e:	a6 17       	cp	r26, r22
    3250:	b7 07       	cpc	r27, r23
    3252:	10 f0       	brcs	.+4      	; 0x3258 <__udivmodhi4_ep>
    3254:	a6 1b       	sub	r26, r22
    3256:	b7 0b       	sbc	r27, r23

00003258 <__udivmodhi4_ep>:
    3258:	88 1f       	adc	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	5a 95       	dec	r21
    325e:	a9 f7       	brne	.-22     	; 0x324a <__udivmodhi4_loop>
    3260:	80 95       	com	r24
    3262:	90 95       	com	r25
    3264:	bc 01       	movw	r22, r24
    3266:	cd 01       	movw	r24, r26
    3268:	08 95       	ret

0000326a <_exit>:
    326a:	f8 94       	cli

0000326c <__stop_program>:
    326c:	ff cf       	rjmp	.-2      	; 0x326c <__stop_program>
